diff -urp libjpeg-turbo-1.5.0.orig/simd/jccolext-sse2-64.asm libjpeg-turbo-1.5.0/simd/jccolext-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jccolext-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jccolext-sse2-64.asm	2016-10-21 20:53:03.018692448 -0700
@@ -28,8 +28,8 @@
 ;
 
 ; r10 = JDIMENSION img_width
-; r11 = JSAMPARRAY input_buf
-; r12 = JSAMPIMAGE output_buf
+; r11p = JSAMPARRAY input_buf
+; r12p = JSAMPIMAGE output_buf
 ; r13 = JDIMENSION output_row
 ; r14 = int num_rows
 
@@ -57,11 +57,21 @@ EXTN(jsimd_rgb_ycc_convert_sse2):
 
         push    rcx
 
+%ifdef __ILP32__
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov rsi, r12
         mov ecx, r13d
-        mov     rdi, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rsi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rsi+2*SIZEOF_JSAMPARRAY]
+%ifdef __ILP32__
+        mov edi, edi
+        mov ebx, ebx
+        mov edx, edx
+        mov ecx, ecx
+%endif
+        mov     REG_DI, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
+        mov     REG_B, JSAMPARRAY [rsi+1*SIZEOF_JSAMPARRAY]
+        mov     REG_D, JSAMPARRAY [rsi+2*SIZEOF_JSAMPARRAY]
         lea     rdi, [rdi+rcx*SIZEOF_JSAMPROW]
         lea     rbx, [rbx+rcx*SIZEOF_JSAMPROW]
         lea     rdx, [rdx+rcx*SIZEOF_JSAMPROW]
@@ -79,10 +88,16 @@ EXTN(jsimd_rgb_ycc_convert_sse2):
         push    rsi
         push    rcx                     ; col
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr
-        mov     rdi, JSAMPROW [rdi]     ; outptr0
-        mov     rbx, JSAMPROW [rbx]     ; outptr1
-        mov     rdx, JSAMPROW [rdx]     ; outptr2
+%ifdef __ILP32__
+        mov esi, esi
+        mov edi, edi
+        mov ebx, ebx
+        mov edx, edx
+%endif
+        mov     REG_SI, JSAMPROW [rsi]     ; inptr
+        mov     REG_DI, JSAMPROW [rdi]     ; outptr0
+        mov     REG_B, JSAMPROW [rbx]     ; outptr1
+        mov     REG_D, JSAMPROW [rdx]     ; outptr2
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     near .columnloop
diff -urp libjpeg-turbo-1.5.0.orig/simd/jcgryext-sse2-64.asm libjpeg-turbo-1.5.0/simd/jcgryext-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jcgryext-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jcgryext-sse2-64.asm	2016-10-21 20:46:24.753555943 -0700
@@ -28,8 +28,8 @@
 ;
 
 ; r10 = JDIMENSION img_width
-; r11 = JSAMPARRAY input_buf
-; r12 = JSAMPIMAGE output_buf
+; r11p = JSAMPARRAY input_buf
+; r12p = JSAMPIMAGE output_buf
 ; r13 = JDIMENSION output_row
 ; r14 = int num_rows
 
@@ -57,9 +57,17 @@ EXTN(jsimd_rgb_gray_convert_sse2):
 
         push    rcx
 
+%ifdef __ILP32__
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov rsi, r12
         mov ecx, r13d
-        mov     rdi, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
+%ifdef __ILP32__
+        mov     edi, edi
+        mov     ecx, ecx
+%endif
+        mov     REG_DI, JSAMPARRAY [rsi+0*SIZEOF_JSAMPARRAY]
         lea     rdi, [rdi+rcx*SIZEOF_JSAMPROW]
 
         pop     rcx
@@ -73,8 +80,12 @@ EXTN(jsimd_rgb_gray_convert_sse2):
         push    rsi
         push    rcx                     ; col
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr
-        mov     rdi, JSAMPROW [rdi]     ; outptr0
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     edi, edi
+%endif
+        mov     REG_SI, JSAMPROW [rsi]     ; inptr
+        mov     REG_DI, JSAMPROW [rdi]     ; outptr0
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     near .columnloop
diff -urp libjpeg-turbo-1.5.0.orig/simd/jchuff-sse2-64.asm libjpeg-turbo-1.5.0/simd/jchuff-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jchuff-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jchuff-sse2-64.asm	2016-10-21 20:46:15.585207541 -0700
@@ -169,12 +169,12 @@ EXTN(jconst_huff_encode_one_block):
 ;                                   c_derived_tbl *dctbl, c_derived_tbl *actbl)
 ;
 
-; r10 = working_state *state
-; r11 = JOCTET *buffer
-; r12 = JCOEFPTR block
+; r10p = working_state *state
+; r11p = JOCTET *buffer
+; r12p = JCOEFPTR block
 ; r13 = int last_dc_val
-; r14 = c_derived_tbl *dctbl
-; r15 = c_derived_tbl *actbl
+; r14p = c_derived_tbl *dctbl
+; r15p = c_derived_tbl *actbl
 
 %define t1              rbp-(DCTSIZE2*SIZEOF_WORD)
 %define t2              t1-(DCTSIZE2*SIZEOF_WORD)
@@ -203,6 +203,13 @@ EXTN(jsimd_huff_encode_one_block_sse2):
 %endif
         push rbx
 
+%ifdef __ILP32__
+        mov r10d, r10d
+        mov r11d, r11d
+        mov r12d, r12d
+        mov r14d, r14d
+        mov r15d, r15d
+%endif
         mov buffer, r11  ; r11 is now sratch
 
         mov put_buffer, MMWORD [r10+16]  ; put_buffer = state->cur.put_buffer;
diff -urp libjpeg-turbo-1.5.0.orig/simd/jcsample-sse2-64.asm libjpeg-turbo-1.5.0/simd/jcsample-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jcsample-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jcsample-sse2-64.asm	2016-10-21 20:53:50.314491121 -0700
@@ -36,8 +36,8 @@
 ; r11 = int max_v_samp_factor
 ; r12 = JDIMENSION v_samp_factor
 ; r13 = JDIMENSION width_blocks
-; r14 = JSAMPARRAY input_data
-; r15 = JSAMPARRAY output_data
+; r14p = JSAMPARRAY input_data
+; r15p = JSAMPARRAY output_data
 
         align   16
         global  EXTN(jsimd_h2v1_downsample_sse2)
@@ -66,12 +66,19 @@ EXTN(jsimd_h2v1_downsample_sse2):
         jle     short .expand_end
 
         cld
+%ifdef __ILP32__
+        mov     r14d, r14d
+        mov     r15d, r15d
+%endif
         mov     rsi, r14        ; input_data
 .expandloop:
         push    rax
         push    rcx
 
-        mov     rdi, JSAMPROW [rsi]
+%ifdef __ILP32__
+        mov     edi, edi
+%endif
+        mov     REG_DI, JSAMPROW [rsi]
         add     rdi,rdx
         mov     al, JSAMPLE [rdi-1]
 
@@ -106,8 +113,12 @@ EXTN(jsimd_h2v1_downsample_sse2):
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]             ; inptr
-        mov rdi, JSAMPROW [rdi]         ; outptr
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     edi, edi
+%endif
+        mov     REG_SI, JSAMPROW [rsi]             ; inptr
+        mov     REG_DI, JSAMPROW [rdi]         ; outptr
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     short .columnloop
@@ -180,8 +191,8 @@ EXTN(jsimd_h2v1_downsample_sse2):
 ; r11 = int max_v_samp_factor
 ; r12 = JDIMENSION v_samp_factor
 ; r13 = JDIMENSION width_blocks
-; r14 = JSAMPARRAY input_data
-; r15 = JSAMPARRAY output_data
+; r14p = JSAMPARRAY input_data
+; r15p = JSAMPARRAY output_data
 
         align   16
         global  EXTN(jsimd_h2v2_downsample_sse2)
@@ -210,12 +221,19 @@ EXTN(jsimd_h2v2_downsample_sse2):
         jle     short .expand_end
 
         cld
+%ifdef __ILP32__
+        and r14d, r14d
+        and r15d, r15d
+%endif
         mov     rsi, r14        ; input_data
 .expandloop:
         push    rax
         push    rcx
 
-        mov     rdi, JSAMPROW [rsi]
+%ifdef __ILP32__
+        mov     edi, edi
+%endif
+        mov     REG_DI, JSAMPROW [rsi]
         add     rdi,rdx
         mov     al, JSAMPLE [rdi-1]
 
@@ -250,9 +268,14 @@ EXTN(jsimd_h2v2_downsample_sse2):
         push    rdi
         push    rsi
 
-        mov     rdx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; inptr0
-        mov     rsi, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; inptr1
-        mov     rdi, JSAMPROW [rdi]                     ; outptr
+%ifdef __ILP32__
+        mov     edx, edx
+        mov     esi, esi
+        mov     edi, edi
+%endif
+        mov     REG_D, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; inptr0
+        mov     REG_SI, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; inptr1
+        mov     REG_DI, JSAMPROW [rdi]                     ; outptr
 
         cmp     rcx, byte SIZEOF_XMMWORD
         jae     short .columnloop
diff -urp libjpeg-turbo-1.5.0.orig/simd/jdcolext-sse2-64.asm libjpeg-turbo-1.5.0/simd/jdcolext-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jdcolext-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jdcolext-sse2-64.asm	2016-10-21 20:46:31.104797292 -0700
@@ -29,9 +29,9 @@
 ;
 
 ; r10 = JDIMENSION out_width
-; r11 = JSAMPIMAGE input_buf
+; r11p = JSAMPIMAGE input_buf
 ; r12 = JDIMENSION input_row
-; r13 = JSAMPARRAY output_buf
+; r13p = JSAMPARRAY output_buf
 ; r14 = int num_rows
 
 %define wk(i)           rbp-(WK_NUM-(i))*SIZEOF_XMMWORD ; xmmword wk[WK_NUM]
@@ -51,6 +51,10 @@ EXTN(jsimd_ycc_rgb_convert_sse2):
         collect_args
         push    rbx
 
+%ifdef __ILP32__
+        mov     r11d, r11d
+        mov     r13d, r13d
+%endif
         mov     ecx, r10d        ; num_cols
         test    rcx,rcx
         jz      near .return
@@ -59,9 +63,14 @@ EXTN(jsimd_ycc_rgb_convert_sse2):
 
         mov     rdi, r11
         mov     ecx, r12d
-        mov     rsi, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
+%ifdef __ILP32__
+        mov esi, esi
+        mov ebx, ebx
+        mov edx, edx
+%endif
+        mov     REG_SI, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
+        mov     REG_B, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
+        mov     REG_D, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
         lea     rsi, [rsi+rcx*SIZEOF_JSAMPROW]
         lea     rbx, [rbx+rcx*SIZEOF_JSAMPROW]
         lea     rdx, [rdx+rcx*SIZEOF_JSAMPROW]
@@ -80,10 +89,16 @@ EXTN(jsimd_ycc_rgb_convert_sse2):
         push    rsi
         push    rcx                     ; col
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr0
-        mov     rbx, JSAMPROW [rbx]     ; inptr1
-        mov     rdx, JSAMPROW [rdx]     ; inptr2
-        mov     rdi, JSAMPROW [rdi]     ; outptr
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     ebx, ebx
+        mov     edx, edx
+        mov     edi, edi
+%endif
+        mov     REG_SI, JSAMPROW [rsi]     ; inptr0
+        mov     REG_B, JSAMPROW [rbx]     ; inptr1
+        mov     REG_D, JSAMPROW [rdx]     ; inptr2
+        mov     REG_DI, JSAMPROW [rdi]     ; outptr
 .columnloop:
 
         movdqa  xmm5, XMMWORD [rbx]     ; xmm5=Cb(0123456789ABCDEF)
diff -urp libjpeg-turbo-1.5.0.orig/simd/jdmrgext-sse2-64.asm libjpeg-turbo-1.5.0/simd/jdmrgext-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jdmrgext-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jdmrgext-sse2-64.asm	2016-10-21 20:46:21.665438597 -0700
@@ -30,9 +30,9 @@
 ;
 
 ; r10 = JDIMENSION output_width
-; r11 = JSAMPIMAGE input_buf
+; r11p = JSAMPIMAGE input_buf
 ; r12 = JDIMENSION in_row_group_ctr
-; r13 = JSAMPARRAY output_buf
+; r13p = JSAMPARRAY output_buf
 
 %define wk(i)           rbp-(WK_NUM-(i))*SIZEOF_XMMWORD ; xmmword wk[WK_NUM]
 %define WK_NUM          3
@@ -57,16 +57,33 @@ EXTN(jsimd_h2v1_merged_upsample_sse2):
 
         push    rcx
 
+%ifdef __ILP32__
+        mov     r11d, r11d
+        mov     r13d, r13d
+%endif
         mov     rdi, r11
         mov     ecx, r12d
-        mov     rsi, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     ebx, ebx
+        mov     edx, edx
+        mov     ecx, ecx
+%endif
+        mov     REG_SI, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
+        mov     REG_B, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
+        mov     REG_D, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
         mov     rdi, r13
-        mov     rsi, JSAMPROW [rsi+rcx*SIZEOF_JSAMPROW]         ; inptr0
-        mov     rbx, JSAMPROW [rbx+rcx*SIZEOF_JSAMPROW]         ; inptr1
-        mov     rdx, JSAMPROW [rdx+rcx*SIZEOF_JSAMPROW]         ; inptr2
-        mov     rdi, JSAMPROW [rdi]                             ; outptr
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     ebx, ebx
+        mov     edx, edx
+        mov     edi, edi
+        mov     ecx, ecx
+%endif
+        mov     REG_SI, JSAMPROW [rsi+rcx*SIZEOF_JSAMPROW]         ; inptr0
+        mov     REG_B, JSAMPROW [rbx+rcx*SIZEOF_JSAMPROW]         ; inptr1
+        mov     REG_D, JSAMPROW [rdx+rcx*SIZEOF_JSAMPROW]         ; inptr2
+        mov     REG_DI, JSAMPROW [rdi]                             ; outptr
 
         pop     rcx                     ; col
 
@@ -440,9 +455,9 @@ EXTN(jsimd_h2v1_merged_upsample_sse2):
 ;
 
 ; r10 = JDIMENSION output_width
-; r11 = JSAMPIMAGE input_buf
+; r11p = JSAMPIMAGE input_buf
 ; r12 = JDIMENSION in_row_group_ctr
-; r13 = JSAMPARRAY output_buf
+; r13p = JSAMPARRAY output_buf
 
         align   16
         global  EXTN(jsimd_h2v2_merged_upsample_sse2)
@@ -456,11 +471,20 @@ EXTN(jsimd_h2v2_merged_upsample_sse2):
 
         mov     eax, r10d
 
+%ifdef __ILP32__
+        mov     r11d, r11d
+        mov     r13d, r13d
+%endif
         mov     rdi, r11
         mov     ecx, r12d
-        mov     rsi, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
-        mov     rbx, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
-        mov     rdx, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     ebx, ebx
+        mov     edx, edx
+%endif
+        mov     REG_SI, JSAMPARRAY [rdi+0*SIZEOF_JSAMPARRAY]
+        mov     REG_B, JSAMPARRAY [rdi+1*SIZEOF_JSAMPARRAY]
+        mov     REG_D, JSAMPARRAY [rdi+2*SIZEOF_JSAMPARRAY]
         mov     rdi, r13
         lea     rsi, [rsi+rcx*SIZEOF_JSAMPROW]
 
diff -urp libjpeg-turbo-1.5.0.orig/simd/jdsample-sse2-64.asm libjpeg-turbo-1.5.0/simd/jdsample-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jdsample-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jdsample-sse2-64.asm	2016-10-21 20:57:16.279324025 -0700
@@ -54,8 +54,8 @@ PW_EIGHT        times 8 dw  8
 
 ; r10 = int max_v_samp_factor
 ; r11 = JDIMENSION downsampled_width
-; r12 = JSAMPARRAY input_data
-; r13 = JSAMPARRAY *output_data_ptr
+; r12p = JSAMPARRAY input_data
+; r13p = JSAMPARRAY *output_data_ptr
 
         align   16
         global  EXTN(jsimd_h2v1_fancy_upsample_sse2)
@@ -74,16 +74,27 @@ EXTN(jsimd_h2v1_fancy_upsample_sse2):
         test    rcx,rcx
         jz      near .return
 
+%ifdef __ILP32__
+        mov     r12d, r12d
+        mov     r13d, r13d
+%endif
         mov     rsi, r12        ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+%ifdef __ILP32__
+        mov     edi, edi
+%endif
+        mov     REG_DI, JSAMPARRAY [rdi]                   ; output_data
 .rowloop:
         push    rax                     ; colctr
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]     ; inptr
-        mov     rdi, JSAMPROW [rdi]     ; outptr
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     edi, edi
+%endif
+        mov     REG_SI, JSAMPROW [rsi]     ; inptr
+        mov     REG_DI, JSAMPROW [rdi]     ; outptr
 
         test    rax, SIZEOF_XMMWORD-1
         jz      short .skip
@@ -193,8 +204,8 @@ EXTN(jsimd_h2v1_fancy_upsample_sse2):
 
 ; r10 = int max_v_samp_factor
 ; r11 = JDIMENSION downsampled_width
-; r12 = JSAMPARRAY input_data
-; r13 = JSAMPARRAY *output_data_ptr
+; r12p = JSAMPARRAY input_data
+; r13p = JSAMPARRAY *output_data_ptr
 
 %define wk(i)           rbp-(WK_NUM-(i))*SIZEOF_XMMWORD ; xmmword wk[WK_NUM]
 %define WK_NUM          4
@@ -221,20 +232,34 @@ EXTN(jsimd_h2v2_fancy_upsample_sse2):
         test    rcx,rcx
         jz      near .return
 
+%ifdef __ILP32__
+        mov     r12d, r12d
+        mov     r13d, r13d
+%endif
         mov     rsi, r12        ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+%ifdef __ILP32__
+        mov     edi, edi
+%endif
+        mov     REG_DI, JSAMPARRAY [rdi]                   ; output_data
 .rowloop:
         push    rax                                     ; colctr
         push    rcx
         push    rdi
         push    rsi
 
-        mov     rcx, JSAMPROW [rsi-1*SIZEOF_JSAMPROW]   ; inptr1(above)
-        mov     rbx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; inptr0
-        mov     rsi, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; inptr1(below)
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]   ; outptr0
-        mov     rdi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]   ; outptr1
+%ifdef __ILP32__
+        mov ecx, ecx
+        mov ebx, ebx
+        mov esi, esi
+        mov edx, edx
+        mov edi, edi
+%endif
+        mov     REG_C, JSAMPROW [rsi-1*SIZEOF_JSAMPROW]   ; inptr1(above)
+        mov     REG_B, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; inptr0
+        mov     REG_SI, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]   ; inptr1(below)
+        mov     REG_D, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]   ; outptr0
+        mov     REG_DI, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]   ; outptr1
 
         test    rax, SIZEOF_XMMWORD-1
         jz      short .skip
@@ -493,8 +518,8 @@ EXTN(jsimd_h2v2_fancy_upsample_sse2):
 
 ; r10 = int max_v_samp_factor
 ; r11 = JDIMENSION output_width
-; r12 = JSAMPARRAY input_data
-; r13 = JSAMPARRAY *output_data_ptr
+; r12p = JSAMPARRAY input_data
+; r13p = JSAMPARRAY *output_data_ptr
 
         align   16
         global  EXTN(jsimd_h2v1_upsample_sse2)
@@ -505,6 +530,11 @@ EXTN(jsimd_h2v1_upsample_sse2):
         mov     rbp,rsp
         collect_args
 
+%ifdef __ILP32__
+        mov     r12d, r12d
+        mov     r13d, r13d
+%endif
+
         mov     edx, r11d
         add     rdx, byte (2*SIZEOF_XMMWORD)-1
         and     rdx, byte -(2*SIZEOF_XMMWORD)
@@ -516,13 +546,20 @@ EXTN(jsimd_h2v1_upsample_sse2):
 
         mov     rsi, r12 ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+%ifdef __ILP32__
+        mov     edi, edi
+%endif
+        mov     REG_DI, JSAMPARRAY [rdi]                   ; output_data
 .rowloop:
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]             ; inptr
-        mov     rdi, JSAMPROW [rdi]             ; outptr
+%ifdef __ILP32__
+        mov esi, esi
+        mov edi, edi
+%endif
+        mov     REG_SI, JSAMPROW [rsi]             ; inptr
+        mov     REG_DI, JSAMPROW [rdi]             ; outptr
         mov     rax,rdx                         ; colctr
 .columnloop:
 
@@ -582,8 +619,8 @@ EXTN(jsimd_h2v1_upsample_sse2):
 
 ; r10 = int max_v_samp_factor
 ; r11 = JDIMENSION output_width
-; r12 = JSAMPARRAY input_data
-; r13 = JSAMPARRAY *output_data_ptr
+; r12p = JSAMPARRAY input_data
+; r13p = JSAMPARRAY *output_data_ptr
 
         align   16
         global  EXTN(jsimd_h2v2_upsample_sse2)
@@ -604,16 +641,28 @@ EXTN(jsimd_h2v2_upsample_sse2):
         test    rcx,rcx
         jz      near .return
 
+%ifdef __ILP32__
+        mov     r12d, r12d
+        mov     r13d, r13d
+%endif
         mov     rsi, r12        ; input_data
         mov     rdi, r13
-        mov     rdi, JSAMPARRAY [rdi]                   ; output_data
+%ifdef __ILP32__
+        mov     edi, edi
+%endif
+        mov     REG_DI, JSAMPARRAY [rdi]                   ; output_data
 .rowloop:
         push    rdi
         push    rsi
 
-        mov     rsi, JSAMPROW [rsi]                     ; inptr
-        mov     rbx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]   ; outptr0
-        mov     rdi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]   ; outptr1
+%ifdef __ILP32__
+        mov     esi, esi
+        mov     ebx, ebx
+        mov     edi, edi
+%endif
+        mov     REG_SI, JSAMPROW [rsi]                     ; inptr
+        mov     REG_B, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]   ; outptr0
+        mov     REG_DI, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]   ; outptr1
         mov     rax,rdx                                 ; colctr
 .columnloop:
 
diff -urp libjpeg-turbo-1.5.0.orig/simd/jfdctflt-sse-64.asm libjpeg-turbo-1.5.0/simd/jfdctflt-sse-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jfdctflt-sse-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jfdctflt-sse-64.asm	2016-10-21 20:46:20.561396637 -0700
@@ -58,7 +58,7 @@ PD_1_306        times 4 dd  1.3065629648
 ; jsimd_fdct_float_sse (FAST_FLOAT *data)
 ;
 
-; r10 = FAST_FLOAT *data
+; r10p = FAST_FLOAT *data
 
 %define wk(i)           rbp-(WK_NUM-(i))*SIZEOF_XMMWORD ; xmmword wk[WK_NUM]
 %define WK_NUM          2
@@ -78,6 +78,9 @@ EXTN(jsimd_fdct_float_sse):
 
         ; ---- Pass 1: process rows.
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+%endif
         mov     rdx, r10        ; (FAST_FLOAT *)
         mov     rcx, DCTSIZE/4
 .rowloop:
diff -urp libjpeg-turbo-1.5.0.orig/simd/jfdctfst-sse2-64.asm libjpeg-turbo-1.5.0/simd/jfdctfst-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jfdctfst-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jfdctfst-sse2-64.asm	2016-10-21 20:46:25.777594858 -0700
@@ -73,7 +73,7 @@ PW_F1306        times 8 dw  F_1_306 << C
 ; jsimd_fdct_ifast_sse2 (DCTELEM *data)
 ;
 
-; r10 = DCTELEM *data
+; r10p = DCTELEM *data
 
 %define wk(i)           rbp-(WK_NUM-(i))*SIZEOF_XMMWORD ; xmmword wk[WK_NUM]
 %define WK_NUM          2
@@ -93,6 +93,9 @@ EXTN(jsimd_fdct_ifast_sse2):
 
         ; ---- Pass 1: process rows.
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+%endif
         mov     rdx, r10        ; (DCTELEM *)
 
         movdqa  xmm0, XMMWORD [XMMBLOCK(0,0,rdx,SIZEOF_DCTELEM)]
diff -urp libjpeg-turbo-1.5.0.orig/simd/jfdctint-sse2-64.asm libjpeg-turbo-1.5.0/simd/jfdctint-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jfdctint-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jfdctint-sse2-64.asm	2016-10-21 20:46:16.769252533 -0700
@@ -94,7 +94,7 @@ PW_DESCALE_P2X  times 8 dw  1 << (PASS1_
 ; jsimd_fdct_islow_sse2 (DCTELEM *data)
 ;
 
-; r10 = DCTELEM *data
+; r10p = DCTELEM *data
 
 %define wk(i)           rbp-(WK_NUM-(i))*SIZEOF_XMMWORD ; xmmword wk[WK_NUM]
 %define WK_NUM          6
@@ -114,7 +114,10 @@ EXTN(jsimd_fdct_islow_sse2):
 
         ; ---- Pass 1: process rows.
 
-        mov     rdx, r10        ; (DCTELEM *)
+%ifdef __ILP32__
+        mov     r10d, r10d
+%endif
+        mov     REG_D, r10p        ; (DCTELEM *)
 
         movdqa  xmm0, XMMWORD [XMMBLOCK(0,0,rdx,SIZEOF_DCTELEM)]
         movdqa  xmm1, XMMWORD [XMMBLOCK(1,0,rdx,SIZEOF_DCTELEM)]
diff -urp libjpeg-turbo-1.5.0.orig/simd/jidctflt-sse2-64.asm libjpeg-turbo-1.5.0/simd/jidctflt-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jidctflt-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jidctflt-sse2-64.asm	2016-10-21 20:46:18.417315162 -0700
@@ -61,9 +61,9 @@ PB_CENTERJSAMP  times 16 db CENTERJSAMPL
 ;                        JSAMPARRAY output_buf, JDIMENSION output_col)
 ;
 
-; r10 = void *dct_table
-; r11 = JCOEFPTR coef_block
-; r12 = JSAMPARRAY output_buf
+; r10p = void *dct_table
+; r11p = JCOEFPTR coef_block
+; r12p = JSAMPARRAY output_buf
 ; r13 = JDIMENSION output_col
 
 %define original_rbp    rbp+0
@@ -88,6 +88,11 @@ EXTN(jsimd_idct_float_sse2):
 
         ; ---- Pass 1: process columns from input, store into work array.
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov     rdx, r10                ; quantptr
         mov     rsi, r11                ; inptr
         lea     rdi, [workspace]                        ; FAST_FLOAT *wsptr
@@ -456,12 +461,16 @@ EXTN(jsimd_idct_float_sse2):
         pshufd  xmm5,xmm6,0x4E  ; xmm5=(10 11 12 13 14 15 16 17 00 01 02 03 04 05 06 07)
         pshufd  xmm3,xmm7,0x4E  ; xmm3=(30 31 32 33 34 35 36 37 20 21 22 23 24 25 26 27)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rbx, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+%ifdef __ILP32__
+        and     edx, edx
+        and     ebx, ebx
+%endif
+        mov     REG_D, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     REG_B, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm6
         movq    XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE], xmm7
-        mov     rdx, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
-        mov     rbx, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     REG_B, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm5
         movq    XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE], xmm3
 
diff -urp libjpeg-turbo-1.5.0.orig/simd/jidctfst-sse2-64.asm libjpeg-turbo-1.5.0/simd/jidctfst-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jidctfst-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jidctfst-sse2-64.asm	2016-10-21 20:46:23.649513988 -0700
@@ -82,9 +82,9 @@ PB_CENTERJSAMP  times 16 db CENTERJSAMPL
 ;                       JSAMPARRAY output_buf, JDIMENSION output_col)
 ;
 
-; r10 = jpeg_component_info *compptr
-; r11 = JCOEFPTR coef_block
-; r12 = JSAMPARRAY output_buf
+; r10p = jpeg_component_info *compptr
+; r11p = JCOEFPTR coef_block
+; r12p = JSAMPARRAY output_buf
 ; r13 = JDIMENSION output_col
 
 %define original_rbp    rbp+0
@@ -106,6 +106,11 @@ EXTN(jsimd_idct_ifast_sse2):
 
         ; ---- Pass 1: process columns from input.
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov     rdx, r10                ; quantptr
         mov     rsi, r11                ; inptr
 
@@ -461,21 +466,25 @@ EXTN(jsimd_idct_ifast_sse2):
         pshufd  xmm6,xmm4,0x4E  ; xmm6=(50 51 52 53 54 55 56 57 40 41 42 43 44 45 46 47)
         pshufd  xmm2,xmm7,0x4E  ; xmm2=(70 71 72 73 74 75 76 77 60 61 62 63 64 65 66 67)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+%ifdef __ILP32__
+        mov     edx, edx
+        mov     esi, esi
+%endif
+        mov     REG_D, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm1
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm3
-        mov     rdx, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm4
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm7
 
-        mov     rdx, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm5
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm0
-        mov     rdx, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm6
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm2
 
diff -urp libjpeg-turbo-1.5.0.orig/simd/jidctint-sse2-64.asm libjpeg-turbo-1.5.0/simd/jidctint-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jidctint-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jidctint-sse2-64.asm	2016-10-21 20:57:46.567475894 -0700
@@ -95,9 +95,9 @@ PB_CENTERJSAMP  times 16 db CENTERJSAMPL
 ;                        JSAMPARRAY output_buf, JDIMENSION output_col)
 ;
 
-; r10 = jpeg_component_info *compptr
-; r11 = JCOEFPTR coef_block
-; r12 = JSAMPARRAY output_buf
+; r10p = jpeg_component_info *compptr
+; r11p = JCOEFPTR coef_block
+; r12p = JSAMPARRAY output_buf
 ; r13 = JDIMENSION output_col
 
 %define original_rbp    rbp+0
@@ -119,6 +119,11 @@ EXTN(jsimd_idct_islow_sse2):
 
         ; ---- Pass 1: process columns from input.
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov     rdx, r10                ; quantptr
         mov     rsi, r11                ; inptr
 
@@ -818,21 +823,26 @@ EXTN(jsimd_idct_islow_sse2):
         pshufd  xmm2,xmm4,0x4E  ; xmm2=(50 51 52 53 54 55 56 57 40 41 42 43 44 45 46 47)
         pshufd  xmm5,xmm3,0x4E  ; xmm5=(70 71 72 73 74 75 76 77 60 61 62 63 64 65 66 67)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+%ifdef __ILP32__
+        mov     edx, edx
+        mov     esi, esi
+        mov     eax, eax
+%endif
+        mov     REG_D, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm7
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm1
-        mov     rdx, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+4*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+6*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm4
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm3
 
-        mov     rdx, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm6
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm0
-        mov     rdx, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+5*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+7*SIZEOF_JSAMPROW]
         movq    XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE], xmm2
         movq    XMM_MMWORD [rsi+rax*SIZEOF_JSAMPLE], xmm5
 
diff -urp libjpeg-turbo-1.5.0.orig/simd/jidctred-sse2-64.asm libjpeg-turbo-1.5.0/simd/jidctred-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jidctred-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jidctred-sse2-64.asm	2016-10-21 20:59:28.453350645 -0700
@@ -103,9 +103,9 @@ PB_CENTERJSAMP  times 16 db CENTERJSAMPL
 ;                      JSAMPARRAY output_buf, JDIMENSION output_col)
 ;
 
-; r10 = void *dct_table
-; r11 = JCOEFPTR coef_block
-; r12 = JSAMPARRAY output_buf
+; r10p = void *dct_table
+; r11p = JCOEFPTR coef_block
+; r12p = JSAMPARRAY output_buf
 ; r13 = JDIMENSION output_col
 
 %define original_rbp    rbp+0
@@ -127,6 +127,11 @@ EXTN(jsimd_idct_4x4_sse2):
 
         ; ---- Pass 1: process columns from input.
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov     rdx, r10                ; quantptr
         mov     rsi, r11                ; inptr
 
@@ -380,12 +385,16 @@ EXTN(jsimd_idct_4x4_sse2):
         pshufd    xmm1,xmm4,0x4E        ; xmm1=(20 21 22 23 30 31 32 33 00 ..)
         pshufd    xmm3,xmm4,0x93        ; xmm3=(30 31 32 33 00 01 02 03 10 ..)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+%ifdef __ILP32__
+        mov     edx, edx
+        mov     esi, esi
+%endif
+        mov     REG_D, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
         movd    XMM_DWORD [rdx+rax*SIZEOF_JSAMPLE], xmm4
         movd    XMM_DWORD [rsi+rax*SIZEOF_JSAMPLE], xmm2
-        mov     rdx, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
+        mov     REG_D, JSAMPROW [rdi+2*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+3*SIZEOF_JSAMPROW]
         movd    XMM_DWORD [rdx+rax*SIZEOF_JSAMPLE], xmm1
         movd    XMM_DWORD [rsi+rax*SIZEOF_JSAMPLE], xmm3
 
@@ -406,9 +415,9 @@ EXTN(jsimd_idct_4x4_sse2):
 ;                      JSAMPARRAY output_buf, JDIMENSION output_col)
 ;
 
-; r10 = void *dct_table
-; r11 = JCOEFPTR coef_block
-; r12 = JSAMPARRAY output_buf
+; r10p = void *dct_table
+; r11p = JCOEFPTR coef_block
+; r12p = JSAMPARRAY output_buf
 ; r13 = JDIMENSION output_col
 
         align   16
@@ -423,6 +432,11 @@ EXTN(jsimd_idct_2x2_sse2):
 
         ; ---- Pass 1: process columns from input.
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov     rdx, r10                ; quantptr
         mov     rsi, r11                ; inptr
 
@@ -560,8 +574,12 @@ EXTN(jsimd_idct_2x2_sse2):
         pextrw  ebx,xmm6,0x00           ; ebx=(C0 D0 -- --)
         pextrw  ecx,xmm6,0x01           ; ecx=(C1 D1 -- --)
 
-        mov     rdx, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
-        mov     rsi, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
+%ifdef __ILP32__
+        mov     edx, edx
+        mov     esi, esi
+%endif
+        mov     REG_D, JSAMPROW [rdi+0*SIZEOF_JSAMPROW]
+        mov     REG_SI, JSAMPROW [rdi+1*SIZEOF_JSAMPROW]
         mov     WORD [rdx+rax*SIZEOF_JSAMPLE], bx
         mov     WORD [rsi+rax*SIZEOF_JSAMPLE], cx
 
diff -urp libjpeg-turbo-1.5.0.orig/simd/jquantf-sse2-64.asm libjpeg-turbo-1.5.0/simd/jquantf-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jquantf-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jquantf-sse2-64.asm	2016-10-21 20:46:28.272689671 -0700
@@ -30,9 +30,9 @@
 ;                            FAST_FLOAT *workspace);
 ;
 
-; r10 = JSAMPARRAY sample_data
+; r10p = JSAMPARRAY sample_data
 ; r11 = JDIMENSION start_col
-; r12 = FAST_FLOAT *workspace
+; r12p = FAST_FLOAT *workspace
 
         align   16
         global  EXTN(jsimd_convsamp_float_sse2)
@@ -48,13 +48,22 @@ EXTN(jsimd_convsamp_float_sse2):
         psllw    xmm7,7
         packsswb xmm7,xmm7              ; xmm7 = PB_CENTERJSAMPLE (0x808080..)
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r12d, r12d
+%endif
         mov rsi, r10
         mov     eax, r11d
         mov rdi, r12
         mov     rcx, DCTSIZE/2
 .convloop:
-        mov     rbx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
-        mov rdx, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]       ; (JSAMPLE *)
+%ifdef __ILP32__
+        mov     ebx, ebx
+        mov     edx, edx
+        mov     eax, eax
+%endif
+        mov     REG_B, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov REG_D, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]       ; (JSAMPLE *)
 
         movq    xmm0, XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE]
         movq    xmm1, XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE]
@@ -104,9 +112,9 @@ EXTN(jsimd_convsamp_float_sse2):
 ;                         FAST_FLOAT *workspace);
 ;
 
-; r10 = JCOEFPTR coef_block
-; r11 = FAST_FLOAT *divisors
-; r12 = FAST_FLOAT *workspace
+; r10p = JCOEFPTR coef_block
+; r11p = FAST_FLOAT *divisors
+; r12p = FAST_FLOAT *workspace
 
         align   16
         global  EXTN(jsimd_quantize_float_sse2)
@@ -117,6 +125,11 @@ EXTN(jsimd_quantize_float_sse2):
         mov     rbp,rsp
         collect_args
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov rsi, r12
         mov rdx, r11
         mov rdi, r10
diff -urp libjpeg-turbo-1.5.0.orig/simd/jquanti-sse2-64.asm libjpeg-turbo-1.5.0/simd/jquanti-sse2-64.asm
--- libjpeg-turbo-1.5.0.orig/simd/jquanti-sse2-64.asm	2016-06-07 10:33:40.000000000 -0700
+++ libjpeg-turbo-1.5.0/simd/jquanti-sse2-64.asm	2016-10-21 20:46:29.952753513 -0700
@@ -30,9 +30,9 @@
 ;                      DCTELEM *workspace);
 ;
 
-; r10 = JSAMPARRAY sample_data
+; r10p = JSAMPARRAY sample_data
 ; r11 = JDIMENSION start_col
-; r12 = DCTELEM *workspace
+; r12p = DCTELEM *workspace
 
         align   16
         global  EXTN(jsimd_convsamp_sse2)
@@ -48,19 +48,28 @@ EXTN(jsimd_convsamp_sse2):
         pcmpeqw xmm7,xmm7
         psllw   xmm7,7                  ; xmm7={0xFF80 0xFF80 0xFF80 0xFF80 ..}
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r12d, r12d
+%endif
         mov rsi, r10
         mov eax, r11d
         mov rdi, r12
         mov     rcx, DCTSIZE/4
 .convloop:
-        mov     rbx, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
-        mov rdx, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]       ; (JSAMPLE *)
+%ifdef __ILP32__
+        mov     ebx, ebx
+        mov     edx, edx
+        mov     eax, eax
+%endif
+        mov     REG_B, JSAMPROW [rsi+0*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov     REG_D, JSAMPROW [rsi+1*SIZEOF_JSAMPROW]       ; (JSAMPLE *)
 
         movq    xmm0, XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE]       ; xmm0=(01234567)
         movq    xmm1, XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE]       ; xmm1=(89ABCDEF)
 
-        mov     rbx, JSAMPROW [rsi+2*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
-        mov     rdx, JSAMPROW [rsi+3*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov     REG_B, JSAMPROW [rsi+2*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
+        mov     REG_D, JSAMPROW [rsi+3*SIZEOF_JSAMPROW]   ; (JSAMPLE *)
 
         movq    xmm2, XMM_MMWORD [rbx+rax*SIZEOF_JSAMPLE]       ; xmm2=(GHIJKLMN)
         movq    xmm3, XMM_MMWORD [rdx+rax*SIZEOF_JSAMPLE]       ; xmm3=(OPQRSTUV)
@@ -106,9 +114,9 @@ EXTN(jsimd_convsamp_sse2):
 %define CORRECTION(m,n,b) XMMBLOCK(DCTSIZE*1+(m),(n),(b),SIZEOF_DCTELEM)
 %define SCALE(m,n,b)      XMMBLOCK(DCTSIZE*2+(m),(n),(b),SIZEOF_DCTELEM)
 
-; r10 = JCOEFPTR coef_block
-; r11 = DCTELEM *divisors
-; r12 = DCTELEM *workspace
+; r10p = JCOEFPTR coef_block
+; r11p = DCTELEM *divisors
+; r12p = DCTELEM *workspace
 
         align   16
         global  EXTN(jsimd_quantize_sse2)
@@ -119,6 +127,11 @@ EXTN(jsimd_quantize_sse2):
         mov     rbp,rsp
         collect_args
 
+%ifdef __ILP32__
+        mov     r10d, r10d
+        mov     r11d, r11d
+        mov     r12d, r12d
+%endif
         mov rsi, r12
         mov rdx, r11
         mov rdi, r10
