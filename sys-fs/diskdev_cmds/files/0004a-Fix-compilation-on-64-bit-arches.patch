From: =?UTF-8?q?Rog=C3=A9rio=20Brito?= <rbrito@ime.usp.br>
Date: Thu, 24 Oct 2013 01:11:21 -0200
Subject: Fix compilation on 64-bit arches

---
 fsck_hfs.tproj/dfalib/BTreePrivate.h |  5 ++++-
 fsck_hfs.tproj/dfalib/SControl.c     |  8 ++++----
 fsck_hfs.tproj/dfalib/SVerify1.c     | 14 +++++++-------
 fsck_hfs.tproj/dfalib/hfs_endian.c   |  2 +-
 4 files changed, 16 insertions(+), 13 deletions(-)

--
diff -urp diskdev_cmds-332.14.orig/fsck_hfs.tproj/dfalib/BTreePrivate.h diskdev_cmds-332.14/fsck_hfs.tproj/dfalib/BTreePrivate.h
--- diskdev_cmds-332.14.orig/fsck_hfs.tproj/dfalib/BTreePrivate.h	2006-02-20 21:45:15.000000000 +0000
+++ diskdev_cmds-332.14/fsck_hfs.tproj/dfalib/BTreePrivate.h	2017-05-19 13:04:00.119302241 +0000
@@ -104,6 +104,9 @@ typedef enum {
 
 ///////////////////////////////////// Types /////////////////////////////////////
 
+// Forward declaration from Scavenger.h
+struct BTreeExtensionsRec;
+
 typedef struct BTreeControlBlock {					// fields specific to BTree CBs
 
 	UInt8		keyCompareType;   /* Key string Comparison Type */
@@ -144,7 +147,7 @@ typedef struct BTreeControlBlock {					/
 	UInt32						 numPossibleHints;	// Looks like a formated hint
 	UInt32						 numValidHints;		// Hint used to find correct record.
 	
-	UInt32						 refCon;			//	Used by DFA to point to private data.
+	struct BTreeExtensionsRec			*refCon;			//	Used by DFA to point to private data.
 	SFCB						*fcbPtr;		// fcb of btree file
 	
 } BTreeControlBlock, *BTreeControlBlockPtr;
diff -urp diskdev_cmds-332.14.orig/fsck_hfs.tproj/dfalib/SControl.c diskdev_cmds-332.14/fsck_hfs.tproj/dfalib/SControl.c
--- diskdev_cmds-332.14.orig/fsck_hfs.tproj/dfalib/SControl.c	2017-05-19 13:02:20.137483589 +0000
+++ diskdev_cmds-332.14/fsck_hfs.tproj/dfalib/SControl.c	2017-05-19 13:04:00.120302280 +0000
@@ -981,7 +981,7 @@ static int ScavTerm( SGlobPtr GPtr )
 		btcbP = (BTreeControlBlock*)fcbP->fcbBtree;
 		if ( btcbP != nil)
 		{
-			if( btcbP->refCon != (UInt32)nil )
+			if( btcbP->refCon != nil )
 			{
 				if(((BTreeExtensionsRec*)btcbP->refCon)->BTCBMPtr != nil)
 				{
@@ -990,13 +990,13 @@ static int ScavTerm( SGlobPtr GPtr )
 				}
 				DisposeMemory( (Ptr)btcbP->refCon );
 				err = MemError();
-				btcbP->refCon = (UInt32)nil;
+				btcbP->refCon = nil;
 			}
 				
 			fcbP = GPtr->calculatedCatalogFCB;	//	release catalog BTree bit map
 			btcbP = (BTreeControlBlock*)fcbP->fcbBtree;
 				
-			if( btcbP->refCon != (UInt32)nil )
+			if( btcbP->refCon != nil )
 			{
 				if(((BTreeExtensionsRec*)btcbP->refCon)->BTCBMPtr != nil)
 				{
@@ -1005,7 +1005,7 @@ static int ScavTerm( SGlobPtr GPtr )
 				}
 				DisposeMemory( (Ptr)btcbP->refCon );
 				err = MemError();
-				btcbP->refCon = (UInt32)nil;
+				btcbP->refCon = nil;
 			}
 		}
 	}
Only in diskdev_cmds-332.14/fsck_hfs.tproj/dfalib: SControl.c.orig
diff -urp diskdev_cmds-332.14.orig/fsck_hfs.tproj/dfalib/SVerify1.c diskdev_cmds-332.14/fsck_hfs.tproj/dfalib/SVerify1.c
--- diskdev_cmds-332.14.orig/fsck_hfs.tproj/dfalib/SVerify1.c	2006-02-20 21:45:15.000000000 +0000
+++ diskdev_cmds-332.14/fsck_hfs.tproj/dfalib/SVerify1.c	2017-05-19 13:04:00.122302356 +0000
@@ -777,8 +777,8 @@ OSErr	CreateExtentsBTreeControlBlock( SG
 	//
 	//	set up our DFA extended BTCB area.  Will we have enough memory on all HFS+ volumes.
 	//
-	btcb->refCon = (UInt32) AllocateClearMemory( sizeof(BTreeExtensionsRec) );			// allocate space for our BTCB extensions
-	if ( btcb->refCon == (UInt32) nil ) {
+	btcb->refCon = AllocateClearMemory( sizeof(BTreeExtensionsRec) );			// allocate space for our BTCB extensions
+	if ( btcb->refCon == nil ) {
 		err = R_NoMem;
 		goto exit;
 	}
@@ -1121,8 +1121,8 @@ OSErr	CreateCatalogBTreeControlBlock( SG
 	//	set up our DFA extended BTCB area.  Will we have enough memory on all HFS+ volumes.
 	//
 
-	btcb->refCon = (UInt32) AllocateClearMemory( sizeof(BTreeExtensionsRec) );			// allocate space for our BTCB extensions
-	if ( btcb->refCon == (UInt32)nil ) {
+	btcb->refCon = AllocateClearMemory( sizeof(BTreeExtensionsRec) );			// allocate space for our BTCB extensions
+	if ( btcb->refCon == nil ) {
 		err = R_NoMem;
 		goto exit;
 	}
@@ -1760,8 +1760,8 @@ OSErr	CreateAttributesBTreeControlBlock(
 	//
 	//	set up our DFA extended BTCB area.  Will we have enough memory on all HFS+ volumes.
 	//
-	btcb->refCon = (UInt32) AllocateClearMemory( sizeof(BTreeExtensionsRec) );			// allocate space for our BTCB extensions
-	if ( btcb->refCon == (UInt32)nil ) {
+	btcb->refCon = AllocateClearMemory( sizeof(BTreeExtensionsRec) );			// allocate space for our BTCB extensions
+	if ( btcb->refCon == nil ) {
 		err = R_NoMem;
 		goto exit;
 	}
@@ -1774,7 +1774,7 @@ OSErr	CreateAttributesBTreeControlBlock(
 	}
 	else
 	{
-		if ( btcb->refCon == (UInt32)nil ) {
+		if ( btcb->refCon == nil ) {
 			err = R_NoMem;
 			goto exit;
 		}
Only in diskdev_cmds-332.14/fsck_hfs.tproj/dfalib: SVerify1.c.orig
Only in diskdev_cmds-332.14/fsck_hfs.tproj/dfalib: hfs_endian.c.rej
