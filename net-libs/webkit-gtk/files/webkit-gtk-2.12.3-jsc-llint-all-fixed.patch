source: https://bugs.webkit.org/attachment.cgi?id=169626
submitter: Yuqiang Xian
bug report: https://bugs.webkit.org/show_bug.cgi?id=99153

applied to 2.12.3 based on webkit-jsc-llint-20121019.patch

modifications:
LowLevelInterpreter.asm: kept relative difference :  VectorSizeOffset = 8 in x32 and 12 in x64
LowLevelInterpreter.asm: added : const PtrSize = 4
LowLevelInterpreter.asm: modified : if X86_64 or ARM64 or C_LOOP or X32
     const maxFrameExtentForSlowPathCall = 0
LowLevelInterpreter.asm: modified : if X86_64 or X86_64_WIN or ARM64 or X32
     const CalleeSaveSpaceAsVirtualRegisters = 3
LLIntData.cpp: added : #if CPU(X32)
    const ptrdiff_t PtrSize = 4;
    const ptrdiff_t CallFrameHeaderSlots = 4;
AirArg.h : added : #if CPU(X32)
    int32_t m_offset { 0 };
B3ConstPtrValue.h : modified : #if USE(JSVALUE64) && !CPU(X32)
    typedef Const64Value ConstPtrValueBase;
MaxFrameExtentForSlowPathCall.h : added : #if CPU(X32)
    COMPILE_ASSERT((maxFrameExtentForSlowPathCall % 8) == 8 - sizeof(CallerFrameAndPC), extent_must_align_stack_from_callframe_pointer);
x86.rb : modified
     when :ptr
        case name
        when "esi", "edi", "ebp", "esp"
            register((isX64 && !isX32 ? "r" : "e") + name16)    #added ebp
       	when "rax", "rbx", "rcx", "rdx"
            register(isX32 ? "e" + name16 : name)
        when "r8", "r9", "r10", "r12", "r13", "r14", "r15"      #added r8,r9,r12
            register(isX32 ? name + "d" : name)
       	else
            register((isX64 && !isX32 ? "r" : "e") + name16)
        end

LowLevelInterpreter.asm : added : elsif X32
        storep csr4, -4[cfr]
LowLevelInterpreter.asm : added : elsif X32
       	loadp -12[cfr], csr2
LowLevelInterpreter.asm : added : elsif X32
            storep csr0, [temp]
LowLevelInterpreter.asm : added : elsif X32
            loadp [temp], csr0
LowLevelInterpreter.asm : added : if ... or X32 to pushCalleeSaves()
popCalleeSaves()
preserveCallerPCAndCFR()
restoreCallerPCAndCFR()
copyCalleeSavesToVMCalleeSavesBuffer()
restoreCalleeSavesFromVMCalleeSavesBuffer()
preserveReturnAddressAfterCall()
functionPrologue()
initPCRelative()
setEntryAddress()

#may break:
x86.rb:     def x86PushOperand(kind)
        isX64 ? "#{x86Operand(:quad)}" : "#{x86Operand(:ptr)}"

missing:
LowLevelInterpreter64.asm no nativeCallTrampoline

---

diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MaxFrameExtentForSlowPathCall.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MaxFrameExtentForSlowPathCall.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MaxFrameExtentForSlowPathCall.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MaxFrameExtentForSlowPathCall.h	2017-05-31 11:03:33.031986572 -0700
@@ -77,8 +77,12 @@ COMPILE_ASSERT(!(maxFrameExtentForSlowPa
 
 #if ENABLE(JIT)
 // Make sure that cfr - maxFrameExtentForSlowPathCall bytes will make the stack pointer aligned
+#if CPU(X32)
+COMPILE_ASSERT((maxFrameExtentForSlowPathCall % 8) == 8 - sizeof(CallerFrameAndPC), extent_must_align_stack_from_callframe_pointer);
+#else
 COMPILE_ASSERT((maxFrameExtentForSlowPathCall % 16) == 16 - sizeof(CallerFrameAndPC), extent_must_align_stack_from_callframe_pointer);
 #endif
+#endif
 
 static const size_t maxFrameExtentForSlowPathCallInRegisters = maxFrameExtentForSlowPathCall / sizeof(Register);
 
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/b3/B3ConstPtrValue.h webkitgtk-2.12.3/Source/JavaScriptCore/b3/B3ConstPtrValue.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/b3/B3ConstPtrValue.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/b3/B3ConstPtrValue.h	2017-05-31 11:03:54.823823281 -0700
@@ -37,7 +37,7 @@ namespace JSC { namespace B3 {
 // platform-agnostic code. Note that a ConstPtrValue will behave like either a Const32Value or
 // Const64Value depending on platform.
 
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
 typedef Const64Value ConstPtrValueBase;
 #else
 typedef Const32Value ConstPtrValueBase;
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/b3/air/AirArg.h webkitgtk-2.12.3/Source/JavaScriptCore/b3/air/AirArg.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/b3/air/AirArg.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/b3/air/AirArg.h	2017-05-31 11:03:50.552659051 -0700
@@ -1299,7 +1299,11 @@ public:
     }
 
 private:
+#if CPU(X32)
+    int32_t m_offset { 0 };
+#else
     int64_t m_offset { 0 };
+#endif
     Kind m_kind { Invalid };
     int32_t m_scale { 1 };
     Air::Tmp m_base;
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LLIntData.cpp webkitgtk-2.12.3/Source/JavaScriptCore/llint/LLIntData.cpp
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LLIntData.cpp	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/llint/LLIntData.cpp	2017-05-31 11:03:57.494925736 -0700
@@ -75,8 +75,13 @@ void Data::performAssertions(VM& vm)
     // prepared to change LowLevelInterpreter.asm as well!!
 
 #if USE(JSVALUE64)
+#if CPU(X32)
+    const ptrdiff_t PtrSize = 4;
+    const ptrdiff_t CallFrameHeaderSlots = 4;
+#else
     const ptrdiff_t PtrSize = 8;
     const ptrdiff_t CallFrameHeaderSlots = 5;
+#endif
 #else // USE(JSVALUE64) // i.e. 32-bit version
     const ptrdiff_t PtrSize = 4;
     const ptrdiff_t CallFrameHeaderSlots = 4;
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h webkitgtk-2.12.3/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h	2017-05-31 11:04:01.191067315 -0700
@@ -34,6 +34,7 @@
 #define OFFLINE_ASM_C_LOOP 1
 #define OFFLINE_ASM_X86 0
 #define OFFLINE_ASM_X86_WIN 0
+#define OFFLINE_ASM_X32 0
 #define OFFLINE_ASM_ARM 0
 #define OFFLINE_ASM_ARMv7 0
 #define OFFLINE_ASM_ARMv7_TRADITIONAL 0
@@ -92,13 +93,19 @@
 #define OFFLINE_ASM_ARM 0
 #endif
 
-#if CPU(X86_64) && !PLATFORM(WIN)
+#if CPU(X86_64) && CPU(X32) && !PLATFORM(WIN)
+#define OFFLINE_ASM_X32 1
+#else
+#define OFFLINE_ASM_X32 0
+#endif
+
+#if CPU(X86_64) && !CPU(X32) && !PLATFORM(WIN)
 #define OFFLINE_ASM_X86_64 1
 #else
 #define OFFLINE_ASM_X86_64 0
 #endif
 
-#if CPU(X86_64) && PLATFORM(WIN)
+#if CPU(X86_64) && !CPU(X32) && PLATFORM(WIN)
 #define OFFLINE_ASM_X86_64_WIN 1
 #else
 #define OFFLINE_ASM_X86_64_WIN 0
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter.asm webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter.asm
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter.asm	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter.asm	2017-05-31 11:03:21.304536436 -0700
@@ -154,7 +154,11 @@ end
 # These declarations must match interpreter/JSStack.h.
 
 if JSVALUE64
-    const PtrSize = 8
+    if X32
+        const PtrSize = 4
+    else
+        const PtrSize = 8
+    end
     const CallFrameHeaderSlots = 5
 else
     const PtrSize = 4
@@ -225,7 +229,7 @@ const CopyBarrierSpaceBits = 3
 
 const CallOpCodeSize = 9
 
-if X86_64 or ARM64 or C_LOOP
+if X86_64 or ARM64 or C_LOOP or X32
     const maxFrameExtentForSlowPathCall = 0
 elsif ARM or ARMv7_TRADITIONAL or ARMv7 or SH4
     const maxFrameExtentForSlowPathCall = 24
@@ -237,7 +241,7 @@ elsif X86_64_WIN
     const maxFrameExtentForSlowPathCall = 64
 end
 
-if X86_64 or X86_64_WIN or ARM64
+if X86_64 or X86_64_WIN or ARM64 or X32
     const CalleeSaveSpaceAsVirtualRegisters = 3
 else
     const CalleeSaveSpaceAsVirtualRegisters = 0
@@ -263,7 +267,7 @@ if JSVALUE64
         const PB = csr7
         const tagTypeNumber = csr8
         const tagMask = csr9
-    elsif X86_64
+    elsif X86_64 or X32
         const PB = csr2
         const tagTypeNumber = csr3
         const tagMask = csr4
@@ -277,18 +281,31 @@ if JSVALUE64
         const tagMask = csr2
     end
 
-    macro loadisFromInstruction(offset, dest)
-        loadis offset * 8[PB, PC, 8], dest
-    end
+    if X32
+        macro loadisFromInstruction(offset, dest)
+            loadis offset * 4[PB, PC, 4], dest
+        end
     
-    macro loadpFromInstruction(offset, dest)
-        loadp offset * 8[PB, PC, 8], dest
-    end
+        macro loadpFromInstruction(offset, dest)
+           loadp offset * 4[PB, PC, 4], dest
+        end
     
-    macro storepToInstruction(value, offset)
-        storep value, offset * 8[PB, PC, 8]
+        macro storepToInstruction(value, offset)
+           storep value, offset * 4[PB, PC, 4]
+        end
+    else
+        macro loadisFromInstruction(offset, dest)
+           loadis offset * 8[PB, PC, 8], dest
+        end
+    
+        macro loadpFromInstruction(offset, dest)
+           loadp offset * 8[PB, PC, 8], dest
+        end
+    
+        macro storepToInstruction(value, offset)
+           storep value, offset * 8[PB, PC, 8]
+        end
     end
-
 else
     const PC = t4 # When changing this, make sure LLIntPC is up to date in LLIntPCRanges.h
     macro loadisFromInstruction(offset, dest)
@@ -375,7 +392,11 @@ const MarkedBlockMask = ~(MarkedBlockSiz
 
 # Allocation constants
 if JSVALUE64
-    const JSFinalObjectSizeClassIndex = 1
+    if X32
+        const JSFinalObjectSizeClassIndex = 3
+    else
+        const JSFinalObjectSizeClassIndex = 1
+    end
 else
     const JSFinalObjectSizeClassIndex = 3
 end
@@ -383,7 +404,11 @@ end
 # This must match wtf/Vector.h
 const VectorBufferOffset = 0
 if JSVALUE64
-    const VectorSizeOffset = 12
+    if X32
+        const VectorSizeOffset = 8
+    else
+        const VectorSizeOffset = 12
+    end
 else
     const VectorSizeOffset = 8
 end
@@ -426,7 +451,7 @@ macro checkStackPointerAlignment(tempReg
     end
 end
 
-if C_LOOP or ARM64 or X86_64 or X86_64_WIN
+if C_LOOP or ARM64 or X86_64 or X86_64_WIN or X32
     const CalleeSaveRegisterCount = 0
 elsif ARM or ARMv7_TRADITIONAL or ARMv7
     const CalleeSaveRegisterCount = 7
@@ -445,7 +470,7 @@ const CalleeRegisterSaveSize = CalleeSav
 const VMEntryTotalFrameSize = (CalleeRegisterSaveSize + sizeof VMEntryRecord + StackAlignment - 1) & ~StackAlignmentMask
 
 macro pushCalleeSaves()
-    if C_LOOP or ARM64 or X86_64 or X86_64_WIN
+    if C_LOOP or ARM64 or X86_64 or X86_64_WIN or X32
     elsif ARM or ARMv7_TRADITIONAL
         emit "push {r4-r10}"
     elsif ARMv7
@@ -473,7 +498,7 @@ macro pushCalleeSaves()
 end
 
 macro popCalleeSaves()
-    if C_LOOP or ARM64 or X86_64 or X86_64_WIN
+    if C_LOOP or ARM64 or X86_64 or X86_64_WIN or X32
     elsif ARM or ARMv7_TRADITIONAL
         emit "pop {r4-r10}"
     elsif ARMv7
@@ -502,7 +527,7 @@ macro preserveCallerPCAndCFR()
     if C_LOOP or ARM or ARMv7 or ARMv7_TRADITIONAL or MIPS or SH4
         push lr
         push cfr
-    elsif X86 or X86_WIN or X86_64 or X86_64_WIN
+    elsif X86 or X86_WIN or X86_64 or X86_64_WIN or X32
         push cfr
     elsif ARM64
         push cfr, lr
@@ -517,7 +542,7 @@ macro restoreCallerPCAndCFR()
     if C_LOOP or ARM or ARMv7 or ARMv7_TRADITIONAL or MIPS or SH4
         pop cfr
         pop lr
-    elsif X86 or X86_WIN or X86_64 or X86_64_WIN
+    elsif X86 or X86_WIN or X86_64 or X86_64_WIN or X32
         pop cfr
     elsif ARM64
         pop lr, cfr
@@ -544,6 +569,10 @@ macro preserveCalleeSavesUsedByLLInt()
         storep csr6, -8[cfr]
         storep csr5, -16[cfr]
         storep csr4, -24[cfr]
+    elsif X32
+        storep csr4, -4[cfr]
+        storep csr3, -8[cfr]
+        storep csr2, -12[cfr]
     end
 end
 
@@ -566,11 +595,15 @@ macro restoreCalleeSavesUsedByLLInt()
         loadp -24[cfr], csr4
         loadp -16[cfr], csr5
         loadp -8[cfr], csr6
+    elsif X32
+        loadp -12[cfr], csr2
+        loadp -8[cfr], csr3
+        loadp -4[cfr], csr4
     end
 end
 
 macro copyCalleeSavesToVMCalleeSavesBuffer(vm, temp)
-    if ARM64 or X86_64 or X86_64_WIN
+    if ARM64 or X86_64 or X86_64_WIN or X32
         leap VM::calleeSaveRegistersBuffer[vm], temp
         if ARM64
             storep csr0, [temp]
@@ -605,12 +638,18 @@ macro copyCalleeSavesToVMCalleeSavesBuff
             storep csr4, 32[temp]
             storep csr5, 40[temp]
             storep csr6, 48[temp]
+        elsif X32
+            storep csr0, [temp]
+            storep csr1, 4[temp]
+            storep csr2, 8[temp]
+            storep csr3, 12[temp]
+            storep csr4, 16[temp]
         end
     end
 end
 
 macro restoreCalleeSavesFromVMCalleeSavesBuffer(vm, temp)
-    if ARM64 or X86_64 or X86_64_WIN
+    if ARM64 or X86_64 or X86_64_WIN or X32
         leap VM::calleeSaveRegistersBuffer[vm], temp
         if ARM64
             loadp [temp], csr0
@@ -645,6 +684,12 @@ macro restoreCalleeSavesFromVMCalleeSave
             loadp 32[temp], csr4
             loadp 40[temp], csr5
             loadp 48[temp], csr6
+	elsif X32
+            loadp [temp], csr0
+            loadp 4[temp], csr1
+            loadp 8[temp], csr2
+            loadp 12[temp], csr3
+            loadp 16[temp], csr4
         end
     end
 end
@@ -653,7 +698,7 @@ macro preserveReturnAddressAfterCall(des
     if C_LOOP or ARM or ARMv7 or ARMv7_TRADITIONAL or ARM64 or MIPS or SH4
         # In C_LOOP case, we're only preserving the bytecode vPC.
         move lr, destinationRegister
-    elsif X86 or X86_WIN or X86_64 or X86_64_WIN
+    elsif X86 or X86_WIN or X86_64 or X86_64_WIN or X32
         pop destinationRegister
     else
         error
@@ -665,7 +710,7 @@ macro copyBarrier(value, slow)
 end
 
 macro functionPrologue()
-    if X86 or X86_WIN or X86_64 or X86_64_WIN
+    if X86 or X86_WIN or X86_64 or X86_64_WIN or X32
         push cfr
     elsif ARM64
         push cfr, lr
@@ -677,7 +722,7 @@ macro functionPrologue()
 end
 
 macro functionEpilogue()
-    if X86 or X86_WIN or X86_64 or X86_64_WIN
+    if X86 or X86_WIN or X86_64 or X86_64_WIN or X32
         pop cfr
     elsif ARM64
         pop lr, cfr
@@ -1068,7 +1113,7 @@ if C_LOOP
         crash()
 else
     macro initPCRelative(pcBase)
-        if X86_64 or X86_64_WIN or X86 or X86_WIN
+        if X86_64 or X86_64_WIN or X86 or X86_WIN or X32
             call _relativePCBase
         _relativePCBase:
             pop pcBase
@@ -1100,7 +1145,7 @@ macro setEntryAddress(index, label)
         leap (label - _relativePCBase)[t1], t3
         move index, t4
         storep t3, [a0, t4, 8]
-    elsif X86 or X86_WIN
+    elsif X86 or X86_WIN or X32
         leap (label - _relativePCBase)[t1], t3
         move index, t4
         storep t3, [a0, t4, 4]
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm	2017-05-31 11:04:10.680431555 -0700
@@ -24,7 +24,11 @@
 
 # Utilities.
 macro jumpToInstruction()
-    jmp [PB, PC, 8]
+    if X32
+        jmp [PB, PC, 4]
+    else
+        jmp [PB, PC, 8]
+    end
 end
 
 macro dispatch(advance)
@@ -38,7 +42,11 @@ macro dispatchInt(advance)
 end
 
 macro dispatchIntIndirect(offset)
-    dispatchInt(offset * 8[PB, PC, 8])
+    if X32
+        dispatchInt(offset * 4[PB, PC, 4])
+    else
+        dispatchInt(offset * 8[PB, PC, 8])
+    end
 end
 
 macro dispatchAfterCall()
@@ -53,7 +61,7 @@ end
 
 macro cCall2(function)
     checkStackPointerAlignment(t4, 0xbad0c002)
-    if X86_64 or ARM64
+    if X86_64 or ARM64 or X32
         call function
     elsif X86_64_WIN
         # Note: this implementation is only correct if the return type size is > 8 bytes.
@@ -100,7 +108,7 @@ end
 # This barely works. arg3 and arg4 should probably be immediates.
 macro cCall4(function)
     checkStackPointerAlignment(t4, 0xbad0c004)
-    if X86_64 or ARM64
+    if X86_64 or ARM64 or X32
         call function
     elsif X86_64_WIN
         # On Win64, rcx, rdx, r8, and r9 are used for passing the first four parameters.
@@ -295,13 +303,21 @@ _handleUncaughtException:
 
 
 macro prepareStateForCCall()
-    leap [PB, PC, 8], PC
+    if X32
+        leap [PB, PC, 4], PC
+    else
+        leap [PB, PC, 8], PC
+    end
 end
 
 macro restoreStateAfterCCall()
     move r0, PC
     subp PB, PC
-    rshiftp 3, PC
+    if X32
+        rshiftp 2, PC
+    else
+        rshiftp 3, PC
+    end
 end
 
 macro callSlowPath(slowPath)
@@ -963,7 +979,7 @@ _llint_op_sub:
 
 _llint_op_div:
     traceExecution()
-    if X86_64 or X86_64_WIN
+    if X86_64 or X86_64_WIN or X32
         binaryOpCustomStore(
             macro (left, right, slow, index)
                 # Assume t3 is scratchable.
@@ -1360,7 +1376,11 @@ _llint_op_put_by_id:
     jmp .opPutByIdSlow
 
 .opPutByIdTypeCheckObjectWithStructure:
-    urshiftp 3, t1
+    if X32
+        rshiftp 2, t1
+    else
+        rshiftp 3, t1
+    end
     bineq t1, JSCell::m_structureID[t3], .opPutByIdSlow
 
 .opPutByIdDoneCheckingTypes:
@@ -1633,7 +1653,11 @@ _llint_op_jneq_ptr:
     loadisFromInstruction(2, t1)
     loadp CodeBlock[cfr], t2
     loadp CodeBlock::m_globalObject[t2], t2
-    loadp JSGlobalObject::m_specialPointers[t2, t1, 8], t1
+    if X32
+        loadp JSGlobalObject::m_specialPointers[t2, t1, 4], t1
+    else
+        loadp JSGlobalObject::m_specialPointers[t2, t1, 8], t1
+    end
     bpneq t1, [cfr, t0, 8], .opJneqPtrTarget
     dispatch(4)
 
@@ -1823,7 +1847,11 @@ _llint_op_catch:
     loadp CodeBlock::m_instructions[PB], PB
     loadp VM::targetInterpreterPCForThrow[t3], PC
     subp PB, PC
-    rshiftp 3, PC
+    if X32
+        rshiftp 2, PC
+    else
+        rshiftp 3, PC
+    end
 
     callSlowPath(_llint_slow_path_check_if_exception_is_uncatchable_and_notify_profiler)
     bpeq r1, 0, .isCatchableException
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/backends.rb webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/backends.rb
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/backends.rb	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/backends.rb	2017-05-31 11:03:14.202263572 -0700
@@ -36,6 +36,7 @@ BACKENDS =
      "X86_WIN",
      "X86_64",
      "X86_64_WIN",
+     "X32",
      "ARM",
      "ARMv7",
      "ARMv7_TRADITIONAL",
@@ -56,6 +57,7 @@ WORKING_BACKENDS =
      "X86_WIN",
      "X86_64",
      "X86_64_WIN",
+     "X32",
      "ARM",
      "ARMv7",
      "ARMv7_TRADITIONAL",
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/instructions.rb webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/instructions.rb
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/instructions.rb	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/instructions.rb	2017-05-31 11:03:14.203263611 -0700
@@ -258,6 +258,56 @@ X86_INSTRUCTIONS =
      "idivi"
     ]
 
+X86_64_INSTRUCTIONS =
+    [
+     "lshiftq",
+     "negq",
+     "rshiftq",
+     "urshiftq",
+     "tqs",
+     "tqz",
+     "tqnz",
+     "peekq",
+     "pokeq",
+     "fq2d",
+     "fd2q",
+     "bqeq",
+     "bqneq",
+     "bqa",
+     "bqaeq",
+     "bqb",
+     "bqbeq",
+     "bqgt",
+     "bqgteq",
+     "bqlt",
+     "bqlteq",
+     "addq",
+     "mulq",
+     "andq",
+     "orq",
+     "subq",
+     "xorq",
+     "loadq",
+     "cqeq",
+     "cqneq",
+     "cqa",
+     "cqaeq",
+     "cqb",
+     "cqbeq",
+     "cqgt",
+     "cqgteq",
+     "cqlt",
+     "cqlteq",
+     "storeq",
+     "btqs",
+     "btqz",
+     "btqnz",
+     "baddqo",
+     "baddqs",
+     "baddqz",
+     "baddqnz"
+    ]
+
 ARM_INSTRUCTIONS =
     [
      "clrbp",
@@ -324,7 +374,7 @@ CXX_INSTRUCTIONS =
      "cloopDo",              # no operands
     ]
 
-INSTRUCTIONS = MACRO_INSTRUCTIONS + X86_INSTRUCTIONS + ARM_INSTRUCTIONS + ARM64_INSTRUCTIONS + RISC_INSTRUCTIONS + MIPS_INSTRUCTIONS + SH4_INSTRUCTIONS + CXX_INSTRUCTIONS
+INSTRUCTIONS = MACRO_INSTRUCTIONS + X86_INSTRUCTIONS + X86_64_INSTRUCTIONS + ARM_INSTRUCTIONS + ARM64_INSTRUCTIONS + RISC_INSTRUCTIONS + MIPS_INSTRUCTIONS + SH4_INSTRUCTIONS + CXX_INSTRUCTIONS
 
 INSTRUCTION_SET = INSTRUCTIONS.to_set
 
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/x86.rb webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/x86.rb
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/x86.rb	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/x86.rb	2017-05-31 11:03:57.495925774 -0700
@@ -90,6 +90,25 @@ def isX64
         true
     when "X86_64_WIN"
         true
+    when "X32"
+        true # X32 is a special mode of X86_64
+    else
+        raise "bad value for $activeBackend: #{$activeBackend}"
+    end
+end
+
+def isX32
+    case $activeBackend
+    when "X86"
+        false
+    when "X86_WIN"
+        false
+    when "X86_64"
+        false
+    when "X86_64_WIN"
+        false
+    when "X32"
+        true
     else
         raise "bad value for $activeBackend: #{$activeBackend}"
     end
@@ -105,6 +124,8 @@ def isWin
         false
     when "X86_64_WIN"
         true
+    when "X32"
+	false
     else
         raise "bad value for $activeBackend: #{$activeBackend}"
     end
@@ -120,6 +141,8 @@ def useX87
         false
     when "X86_64_WIN"
         false
+    when "X32"
+	false
     else
         raise "bad value for $activeBackend: #{$activeBackend}"
     end
@@ -175,7 +198,7 @@ def getSizeString(kind)
     when :int
         size = "dword"
     when :ptr
-        size =  isX64 ? "qword" : "dword"
+        size =  isX64 && !isX32 ? "qword" : "dword"
     when :double
         size = "qword"
     when :quad
@@ -197,7 +220,7 @@ class SpecialRegister < NoChildren
         when :int
             register(@name + "d")
         when :ptr
-            register(@name)
+            register(isX32 ? @name + "d" : @name)
         when :quad
             register(@name)
         else
@@ -208,6 +231,9 @@ class SpecialRegister < NoChildren
         # Call operands are not allowed to be partial registers.
         "#{callPrefix}#{x86Operand(:quad)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(:quad)}"
+    end
 end
 
 X64_SCRATCH_REGISTER = SpecialRegister.new("r11")
@@ -232,7 +258,7 @@ def x86GPRName(name, kind)
         when :int
             return register(name + "d")
         when :ptr
-            return register(name)
+            return register(isX32 ? name + "d" : name)
         when :quad
             return register(name)
         end
@@ -247,7 +273,16 @@ def x86GPRName(name, kind)
     when :int
         register("e" + name16)
     when :ptr
-        register((isX64 ? "r" : "e") + name16)
+        case name
+        when "esi", "edi", "ebp", "esp"
+            register((isX64 && !isX32 ? "r" : "e") + name16)
+        when "rax", "rbx", "rcx", "rdx"
+            register(isX32 ? "e" + name16 : name)
+        when "r8", "r9", "r10", "r12", "r13", "r14", "r15"
+            register(isX32 ? name + "d" : name)
+        else
+            register((isX64 && !isX32 ? "r" : "e") + name16)
+        end
     when :quad
         isX64 ? register("r" + name16) : raise
     else
@@ -337,7 +372,10 @@ class RegisterID
     end
 
     def x86CallOperand(kind)
-        "#{callPrefix}#{x86Operand(:ptr)}"
+        isX64 ? "#{callPrefix}#{x86Operand(:quad)}" : "#{callPrefix}#{x86Operand(:ptr)}"
+    end
+    def x86PushOperand(kind)
+        isX64 ? "#{x86Operand(:quad)}" : "#{x86Operand(:ptr)}"
     end
 end
 
@@ -382,6 +420,9 @@ class FPRegisterID
     def x86CallOperand(kind)
         "#{callPrefix}#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(kind)}"
+    end
 end
 
 class Immediate
@@ -398,6 +439,9 @@ class Immediate
     def x86CallOperand(kind)
         "#{value}"
     end
+    def x86PushOperand(kind)
+        "$#{x86Operand(kind)}"
+    end
 end
 
 class Address
@@ -414,6 +458,9 @@ class Address
     def x86CallOperand(kind)
         "#{callPrefix}#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "$#{x86Operand(kind)}"
+    end
 end
 
 class BaseIndex
@@ -440,6 +487,9 @@ class BaseIndex
     def x86CallOperand(kind)
         "#{callPrefix}#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(kind)}"
+    end
 end
 
 class AbsoluteAddress
@@ -458,6 +508,9 @@ class AbsoluteAddress
     def x86CallOperand(kind)
         "#{callPrefix}#{address.value}"
     end
+    def x86PushOperand(kind)
+        "#{address.value}"
+    end
 end
 
 class LabelReference
@@ -517,6 +570,9 @@ class Sequence
     def getModifiedListX86_64_WIN
         getModifiedListX86_64
     end
+    def getModifiedListX32
+        return getModifiedListX86_64
+    end
 end
 
 class Instruction
@@ -546,7 +602,7 @@ class Instruction
         when :int
             "l"
         when :ptr
-            isX64 ? "q" : "l"
+            isX64 && !isX32 ? "q" : "l"
         when :quad
             isX64 ? "q" : raise
         when :double
@@ -565,7 +621,7 @@ class Instruction
         when :int
             4
         when :ptr
-            isX64 ? 8 : 4
+            isX64 && !isX32 ? 8 : 4
         when :quad
             isX64 ? 8 : raise
         when :double
@@ -594,6 +650,19 @@ class Instruction
         handleX86OpWithNumOperands(opcode, kind, operands.size)
     end
     
+    def handleX86Jump(opcode, kind)
+        if isX32
+            if operands[0].is_a? Address or operands[0].is_a? BaseIndex or operands[0].is_a? AbsoluteAddress
+                $asm.puts "mov#{x86Suffix(kind)} #{operands[0].x86Operand(kind)}, #{X64_SCRATCH_REGISTER.x86Operand(kind)}"
+                $asm.puts "#{opcode} #{X64_SCRATCH_REGISTER.x86CallOperand(kind)}"
+            else
+                $asm.puts "#{opcode} #{operands[0].x86CallOperand(kind)}"
+            end
+        else
+            $asm.puts "#{opcode} #{operands[0].x86CallOperand(kind)}"
+        end
+    end
+
     def handleX86Shift(opcode, kind)
         if operands[0].is_a? Immediate or operands[0].x86GPR == "ecx"
             $asm.puts "#{opcode} #{orderOperands(operands[0].x86Operand(:byte), operands[1].x86Operand(kind))}"
@@ -863,6 +932,11 @@ class Instruction
         lowerX86Common
     end
 
+    def lowerX32
+        raise unless $activeBackend == "X32"
+        lowerX86Common
+    end
+
     def lowerX86Common
         $asm.codeOrigin codeOriginString if $enableCodeOriginComments
         $asm.annotation annotation if $enableInstrAnnotations
@@ -1141,12 +1215,12 @@ class Instruction
         when "pop"
             operands.each {
                 | op |
-                $asm.puts "pop #{op.x86Operand(:ptr)}"
+                $asm.puts "pop #{op.x86PushOperand(:ptr)}"
             }
         when "push"
             operands.each {
                 | op |
-                $asm.puts "push #{op.x86Operand(:ptr)}"
+                $asm.puts "push #{op.x86PushOperand(:ptr)}"
             }
         when "move"
             handleMove
@@ -1265,7 +1339,8 @@ class Instruction
         when "btbnz"
             handleX86BranchTest("jnz", :byte)
         when "jmp"
-            $asm.puts "jmp #{operands[0].x86CallOperand(:ptr)}"
+            #$asm.puts "jmp #{operands[0].x86CallOperand(:ptr)}"
+            handleX86Jump("jmp", :ptr)
         when "baddio"
             handleX86OpBranch("add#{x86Suffix(:int)}", "jo", :int)
         when "baddpo"
@@ -1323,11 +1398,12 @@ class Instruction
                     $asm.puts "ffree #{register("st")}(#{offset})"
                 }
             end
-            op = operands[0].x86CallOperand(:ptr)
+            #op = operands[0].x86CallOperand(:ptr)
             if operands[0].is_a? LabelReference
                 operands[0].used
             end
-            $asm.puts "call #{op}"
+            #$asm.puts "call #{op}"
+            handleX86Jump("call", :ptr)
         when "ret"
             $asm.puts "ret"
         when "cieq"
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/JSObject.h webkitgtk-2.12.3/Source/JavaScriptCore/runtime/JSObject.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/JSObject.h	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/runtime/JSObject.h	2017-05-31 11:04:19.095755190 -0700
@@ -1493,7 +1493,11 @@ inline size_t maxOffsetRelativeToBase(Pr
     return static_cast<size_t>(addressOffset);
 }
 
+#if CPU(X32)
+COMPILE_ASSERT(!((sizeof(JSObject)*2) % sizeof(WriteBarrierBase<Unknown>)), JSObject_inline_storage_has_correct_alignment);
+#else
 COMPILE_ASSERT(!(sizeof(JSObject) % sizeof(WriteBarrierBase<Unknown>)), JSObject_inline_storage_has_correct_alignment);
+#endif
 
 ALWAYS_INLINE Identifier makeIdentifier(VM& vm, const char* name)
 {
diff -urp webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/SlowPathReturnType.h webkitgtk-2.12.3/Source/JavaScriptCore/runtime/SlowPathReturnType.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/SlowPathReturnType.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/runtime/SlowPathReturnType.h	2017-05-31 11:03:14.204263650 -0700
@@ -35,22 +35,22 @@ namespace JSC {
 // 'extern "C"') needs to be POD; hence putting any constructors into it could cause either compiler
 // warnings, or worse, a change in the ABI used to return these types.
 struct SlowPathReturnType {
-    void* a;
-    void* b;
+    int64_t a;
+    int64_t b;
 };
 
 inline SlowPathReturnType encodeResult(void* a, void* b)
 {
     SlowPathReturnType result;
-    result.a = a;
-    result.b = b;
+    result.a = reinterpret_cast<uintptr_t>(a);
+    result.b = reinterpret_cast<uintptr_t>(b);
     return result;
 }
 
 inline void decodeResult(SlowPathReturnType result, void*& a, void*& b)
 {
-    a = result.a;
-    b = result.b;
+    a = reinterpret_cast<void*>(result.a);
+    b = reinterpret_cast<ExecState*>(result.b);
 }
 
 #else // USE(JSVALUE32_64)
