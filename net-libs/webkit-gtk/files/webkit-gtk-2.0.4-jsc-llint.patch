source: https://bugs.webkit.org/attachment.cgi?id=169626
submitter: Yuqiang Xian
bug report: https://bugs.webkit.org/show_bug.cgi?id=99153

applied to 2.0.4 based on webkit-jsc-llint-20121019.patch
doesn't include LowLevelInterpreter.asm cfr array changes

--

diff -urp webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h webkitgtk-2.0.4/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h
--- webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h	2013-07-19 00:03:48.000000000 -0700
+++ webkitgtk-2.0.4/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h	2017-05-31 21:42:58.994034094 -0700
@@ -37,6 +37,7 @@
 #define OFFLINE_ASM_X86 0
 #define OFFLINE_ASM_ARMv7 0
 #define OFFLINE_ASM_X86_64 0
+#define OFFLINE_ASM_X32 0
 #define OFFLINE_ASM_ARMv7s 0
 #define OFFLINE_ASM_MIPS 0
 
@@ -62,7 +63,13 @@
 #define OFFLINE_ASM_ARMv7 0
 #endif
 
-#if CPU(X86_64)
+#if CPU(X86_64) && CPU(X32)
+#define OFFLINE_ASM_X32 1
+#else
+#define OFFLINE_ASM_X32 0
+#endif
+
+#if CPU(X86_64) && !CPU(X32)
 #define OFFLINE_ASM_X86_64 1
 #else
 #define OFFLINE_ASM_X86_64 0
diff -urp webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LLIntSlowPaths.h webkitgtk-2.0.4/Source/JavaScriptCore/llint/LLIntSlowPaths.h
--- webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LLIntSlowPaths.h	2013-07-19 00:03:48.000000000 -0700
+++ webkitgtk-2.0.4/Source/JavaScriptCore/llint/LLIntSlowPaths.h	2017-05-31 21:42:58.995034133 -0700
@@ -43,22 +43,22 @@ namespace LLInt {
 // 'extern "C"') needs to be POD; hence putting any constructors into it could cause either compiler
 // warnings, or worse, a change in the ABI used to return these types.
 struct SlowPathReturnType {
-    void* a;
-    ExecState* b;
+    int64_t a;
+    int64_t b;
 };
 
 inline SlowPathReturnType encodeResult(void* a, ExecState* b)
 {
     SlowPathReturnType result;
-    result.a = a;
-    result.b = b;
+    result.a = reinterpret_cast<uintptr_t>(a);
+    result.b = reinterpret_cast<uintptr_t>(b);
     return result;
 }
 
 inline void decodeResult(SlowPathReturnType result, void*& a, ExecState*& b)
 {
-    a = result.a;
-    b = result.b;
+    a = reinterpret_cast<void*>(result.a);
+    b = reinterpret_cast<ExecState*>(result.b);
 }
 
 #else // USE(JSVALUE32_64)
diff -urp webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LowLevelInterpreter.asm webkitgtk-2.0.4/Source/JavaScriptCore/llint/LowLevelInterpreter.asm
--- webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LowLevelInterpreter.asm	2013-07-19 00:03:48.000000000 -0700
+++ webkitgtk-2.0.4/Source/JavaScriptCore/llint/LowLevelInterpreter.asm	2017-05-31 21:42:58.995034133 -0700
@@ -55,18 +55,31 @@ if JSVALUE64
     const tagTypeNumber = csr1
     const tagMask = csr2
     
-    macro loadisFromInstruction(offset, dest)
-        loadis offset * 8[PB, PC, 8], dest
-    end
+    if X32
+        macro loadisFromInstruction(offset, dest)
+            loadis offset * 4[PB, PC, 4], dest
+        end
     
-    macro loadpFromInstruction(offset, dest)
-        loadp offset * 8[PB, PC, 8], dest
-    end
+        macro loadpFromInstruction(offset, dest)
+            loadp offset * 4[PB, PC, 4], dest
+        end
+    
+        macro storepToInstruction(value, offset)
+            storep value, offset * 4[PB, PC, 4]
+        end
+    else
+        macro loadisFromInstruction(offset, dest)
+            loadis offset * 8[PB, PC, 8], dest
+        end
     
-    macro storepToInstruction(value, offset)
-        storep value, offset * 8[PB, PC, 8]
+        macro loadpFromInstruction(offset, dest)
+            loadp offset * 8[PB, PC, 8], dest
+        end
+    
+        macro storepToInstruction(value, offset)
+            storep value, offset * 8[PB, PC, 8]
+        end
     end
-
 else
     const PC = t4
     macro loadisFromInstruction(offset, dest)
@@ -148,7 +161,11 @@ const PutToBaseOperationKindVariablePut
 
 # Allocation constants
 if JSVALUE64
-    const JSFinalObjectSizeClassIndex = 1
+    if X32
+        const JSFinalObjectSizeClassIndex = 3
+    else
+        const JSFinalObjectSizeClassIndex = 1
+    end
 else
     const JSFinalObjectSizeClassIndex = 3
 end
@@ -156,7 +173,11 @@ end
 # This must match wtf/Vector.h
 const VectorSizeOffset = 0
 if JSVALUE64
-    const VectorBufferOffset = 8
+    if X32
+        const VectorBufferOffset = 4
+    else
+        const VectorBufferOffset = 8
+    end
 else
     const VectorBufferOffset = 4
 end
@@ -185,7 +206,7 @@ macro preserveReturnAddressAfterCall(des
     if C_LOOP or ARMv7 or MIPS
         # In C_LOOP case, we're only preserving the bytecode vPC.
         move lr, destinationRegister
-    elsif X86 or X86_64
+    elsif X86 or X86_64 or X32
         pop destinationRegister
     else
         error
@@ -196,7 +217,7 @@ macro restoreReturnAddressBeforeReturn(s
     if C_LOOP or ARMv7 or MIPS
         # In C_LOOP case, we're only restoring the bytecode vPC.
         move sourceRegister, lr
-    elsif X86 or X86_64
+    elsif X86 or X86_64 or X32
         push sourceRegister
     else
         error
diff -urp webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm webkitgtk-2.0.4/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm
--- webkitgtk-2.0.4.orig/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm	2013-07-19 00:03:48.000000000 -0700
+++ webkitgtk-2.0.4/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm	2017-05-31 23:31:59.673949538 -0700
@@ -34,7 +34,11 @@ const ValueNull       = TagBitTypeOther
 
 # Utilities.
 macro jumpToInstruction()
-    jmp [PB, PC, 8]
+    if X32
+        jmp [PB, PC, 4]
+    else
+        jmp [PB, PC, 8]
+    end
 end
 
 macro dispatch(advance)
@@ -48,7 +52,11 @@ macro dispatchInt(advance)
 end
 
 macro dispatchIntIndirect(offset)
-    dispatchInt(offset * 8[PB, PC, 8])
+    if X32
+        dispatchInt(offset * 4[PB, PC, 4])
+    else
+        dispatchInt(offset * 8[PB, PC, 8])
+    end
 end
 
 macro dispatchAfterCall()
@@ -59,7 +67,7 @@ macro dispatchAfterCall()
 end
 
 macro cCall2(function, arg1, arg2)
-    if X86_64
+    if X86_64 or X32
         move arg1, t5
         move arg2, t4
         call function
@@ -72,7 +80,7 @@ end
 
 # This barely works. arg3 and arg4 should probably be immediates.
 macro cCall4(function, arg1, arg2, arg3, arg4)
-    if X86_64
+    if X86_64 or X32
         move arg1, t5
         move arg2, t4
         move arg3, t1
@@ -86,7 +94,11 @@ macro cCall4(function, arg1, arg2, arg3,
 end
 
 macro prepareStateForCCall()
-    leap [PB, PC, 8], PC
+    if X32
+        leap [PB, PC, 4], PC
+    else
+        leap [PB, PC, 8], PC
+    end
     move PB, t3
 end
 
@@ -95,7 +107,11 @@ macro restoreStateAfterCCall()
     move t1, cfr
     move t3, PB
     subp PB, PC
-    rshiftp 3, PC
+    if X32
+        rshiftp 2, PC
+    else
+        rshiftp 3, PC
+    end
 end
 
 macro callSlowPath(slowPath)
@@ -1050,7 +1066,7 @@ _llint_op_get_by_val:
 .opGetByValNotContiguous:
     bineq t2, DoubleShape, .opGetByValNotDouble
     biaeq t1, -sizeof IndexingHeader + IndexingHeader::m_publicLength[t3], .opGetByValOutOfBounds
-    loadis 8[PB, PC, 8], t0
+    loadisFromInstruction(1, t0)
     loadd [t3, t1, 8], ft0
     bdnequn ft0, ft0, .opGetByValOutOfBounds
     fd2q ft0, t2
@@ -1309,7 +1325,11 @@ _llint_op_jneq_ptr:
     loadisFromInstruction(2, t1)
     loadp CodeBlock[cfr], t2
     loadp CodeBlock::m_globalObject[t2], t2
-    loadp JSGlobalObject::m_specialPointers[t2, t1, 8], t1
+    if X32
+        loadp JSGlobalObject::m_specialPointers[t2, t1, 4], t1
+    else
+        loadp JSGlobalObject::m_specialPointers[t2, t1, 8], t1
+    end
     bpneq t1, [cfr, t0, 8], .opJneqPtrTarget
     dispatch(4)
 
@@ -1599,7 +1619,11 @@ _llint_op_catch:
     loadp JITStackFrame::globalData[sp], t3
     loadp JSGlobalData::targetInterpreterPCForThrow[t3], PC
     subp PB, PC
-    rshiftp 3, PC
+    if X32
+        rshiftp 2, PC
+    else
+        rshiftp 3, PC
+    end
     loadq JSGlobalData::exception[t3], t0
     storeq 0, JSGlobalData::exception[t3]
     loadisFromInstruction(1, t2)
@@ -1635,7 +1659,7 @@ _llint_throw_during_call_trampoline:
 
 macro nativeCallTrampoline(executableOffsetToFunction)
     storep 0, CodeBlock[cfr]
-    if X86_64
+    if X86_64 or X32
         loadp JITStackFrame::globalData + 8[sp], t0
         storep cfr, JSGlobalData::topCallFrame[t0]
         loadp CallerFrame[cfr], t0
Only in webkitgtk-2.0.4/Source/JavaScriptCore/llint: LowLevelInterpreter64.asm.save
Only in webkitgtk-2.0.4/Source/JavaScriptCore/llint: LowLevelInterpreter64.asm.save.1
diff -urp webkitgtk-2.0.4.orig/Source/JavaScriptCore/offlineasm/backends.rb webkitgtk-2.0.4/Source/JavaScriptCore/offlineasm/backends.rb
--- webkitgtk-2.0.4.orig/Source/JavaScriptCore/offlineasm/backends.rb	2013-07-19 00:03:48.000000000 -0700
+++ webkitgtk-2.0.4/Source/JavaScriptCore/offlineasm/backends.rb	2017-05-31 21:42:58.996034172 -0700
@@ -32,6 +32,7 @@ BACKENDS =
     [
      "X86",
      "X86_64",
+     "X32",
      "ARMv7",
      "MIPS",
      "C_LOOP"
@@ -46,6 +47,7 @@ WORKING_BACKENDS =
     [
      "X86",
      "X86_64",
+     "X32",
      "ARMv7",
      "MIPS",
      "C_LOOP"
diff -urp webkitgtk-2.0.4.orig/Source/JavaScriptCore/offlineasm/instructions.rb webkitgtk-2.0.4/Source/JavaScriptCore/offlineasm/instructions.rb
--- webkitgtk-2.0.4.orig/Source/JavaScriptCore/offlineasm/instructions.rb	2013-07-19 00:03:48.000000000 -0700
+++ webkitgtk-2.0.4/Source/JavaScriptCore/offlineasm/instructions.rb	2017-05-31 21:42:58.997034211 -0700
@@ -257,6 +257,56 @@ X86_INSTRUCTIONS =
      "idivi"
     ]
 
+X86_64_INSTRUCTIONS =
+    [
+     "lshiftq",
+     "negq",
+     "rshiftq",
+     "urshiftq",
+     "tqs",
+     "tqz",
+     "tqnz",
+     "peekq",
+     "pokeq",
+     "fq2d",
+     "fd2q",
+     "bqeq",
+     "bqneq",
+     "bqa",
+     "bqaeq",
+     "bqb",
+     "bqbeq",
+     "bqgt",
+     "bqgteq",
+     "bqlt",
+     "bqlteq",
+     "addq",
+     "mulq",
+     "andq",
+     "orq",
+     "subq",
+     "xorq",
+     "loadq",
+     "cqeq",
+     "cqneq",
+     "cqa",
+     "cqaeq",
+     "cqb",
+     "cqbeq",
+     "cqgt",
+     "cqgteq",
+     "cqlt",
+     "cqlteq",
+     "storeq",
+     "btqs",
+     "btqz",
+     "btqnz",
+     "baddqo",
+     "baddqs",
+     "baddqz",
+     "baddqnz"
+    ]
+
 ARMv7_INSTRUCTIONS =
     [
      "smulli",
@@ -291,7 +341,7 @@ CXX_INSTRUCTIONS =
      "cloopDo",              # no operands
     ]
 
-INSTRUCTIONS = MACRO_INSTRUCTIONS + X86_INSTRUCTIONS + ARMv7_INSTRUCTIONS + MIPS_INSTRUCTIONS + CXX_INSTRUCTIONS
+INSTRUCTIONS = MACRO_INSTRUCTIONS + X86_INSTRUCTIONS + X86_64_INSTRUCTIONS + ARMv7_INSTRUCTIONS + MIPS_INSTRUCTIONS + CXX_INSTRUCTIONS
 
 INSTRUCTION_PATTERN = Regexp.new('\\A((' + INSTRUCTIONS.join(')|(') + '))\\Z')
 
diff -urp webkitgtk-2.0.4.orig/Source/JavaScriptCore/offlineasm/x86.rb webkitgtk-2.0.4/Source/JavaScriptCore/offlineasm/x86.rb
--- webkitgtk-2.0.4.orig/Source/JavaScriptCore/offlineasm/x86.rb	2013-07-19 00:03:48.000000000 -0700
+++ webkitgtk-2.0.4/Source/JavaScriptCore/offlineasm/x86.rb	2017-05-31 21:43:01.427127516 -0700
@@ -29,6 +29,21 @@ def isX64
         false
     when "X86_64"
         true
+    when "X32"
+        true # X32 is a special mode of X86_64
+    else
+        raise "bad value for $activeBackend: #{$activeBackend}"
+    end
+end
+
+def isX32
+    case $activeBackend
+    when "X86"
+        false
+    when "X86_64"
+        false
+    when "X32"
+        true
     else
         raise "bad value for $activeBackend: #{$activeBackend}"
     end
@@ -44,7 +59,7 @@ class SpecialRegister < NoChildren
         when :int
             "%" + @name + "d"
         when :ptr
-            "%" + @name
+            isX32 ? "%" + @name + "d" : "%" + @name
         when :quad
             "%" + @name
         else
@@ -55,6 +70,9 @@ class SpecialRegister < NoChildren
         # Call operands are not allowed to be partial registers.
         "*#{x86Operand(:quad)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(:quad)}"
+    end
 end
 
 X64_SCRATCH_REGISTER = SpecialRegister.new("r11")
@@ -84,7 +102,7 @@ class RegisterID
             when :int
                 "%eax"
             when :ptr
-                isX64 ? "%rax" : "%eax"
+                isX64 && !isX32 ? "%rax" : "%eax"
             when :quad
                 isX64 ? "%rax" : raise
             else
@@ -99,7 +117,7 @@ class RegisterID
             when :int
                 "%edx"
             when :ptr
-                isX64 ? "%rdx" : "%edx"
+                isX64 && !isX32 ? "%rdx" : "%edx"
             when :quad
                 isX64 ? "%rdx" : raise
             else
@@ -114,7 +132,7 @@ class RegisterID
             when :int
                 "%ecx"
             when :ptr
-                isX64 ? "%rcx" : "%ecx"
+                isX64 && !isX32 ? "%rcx" : "%ecx"
             when :quad
                 isX64 ? "%rcx" : raise
             else
@@ -129,7 +147,7 @@ class RegisterID
             when :int
                 "%ebx"
             when :ptr
-                isX64 ? "%rbx" : "%ebx"
+                isX64 && !isX32 ? "%rbx" : "%ebx"
             when :quad
                 isX64 ? "%rbx" : raise
             else
@@ -144,7 +162,7 @@ class RegisterID
             when :int
                 "%esi"
             when :ptr
-                isX64 ? "%rsi" : "%esi"
+                isX64 && !isX32 ? "%rsi" : "%esi"
             when :quad
                 isX64 ? "%rsi" : raise
             else
@@ -158,6 +176,8 @@ class RegisterID
                 when :int
                     "%r13d"
                 when :ptr
+                    isX32 ? "%r13d" : "%r13"
+                when :quad
                     "%r13"
                 when :quad
                     "%r13"
@@ -187,7 +207,7 @@ class RegisterID
             when :int
                 "%esp"
             when :ptr
-                isX64 ? "%rsp" : "%esp"
+                isX64 && !isX32 ? "%rsp" : "%esp"
             when :quad
                 isX64 ? "%rsp" : raise
             else
@@ -203,6 +223,8 @@ class RegisterID
             when :int
                 "%edi"
             when :ptr
+                isX32 ? "%edi" : "%rdi"
+            when :quad
                 "%rdi"
             when :quad
                 "%rdi"
@@ -215,6 +237,8 @@ class RegisterID
             when :int
                 "%r10d"
             when :ptr
+                isX32 ? "%r10d" : "%r10"
+            when :quad
                 "%r10"
             when :quad
                 "%r10"
@@ -227,6 +251,8 @@ class RegisterID
             when :int
                 "%r14d"
             when :ptr
+                isX32 ? "%r14d" : "%r14"
+            when :quad
                 "%r14"
             when :quad
                 "%r14"
@@ -239,6 +265,8 @@ class RegisterID
             when :int
                 "%r15d"
             when :ptr
+                isX32 ? "%r15d" : "%r15"
+            when :quad
                 "%r15"
             when :quad
                 "%r15"
@@ -250,6 +278,9 @@ class RegisterID
     def x86CallOperand(kind)
         isX64 ? "*#{x86Operand(:quad)}" : "*#{x86Operand(:ptr)}"
     end
+    def x86PushOperand(kind)
+        isX64 ? "#{x86Operand(:quad)}" : "#{x86Operand(:ptr)}"
+    end
 end
 
 class FPRegisterID
@@ -273,7 +304,10 @@ class FPRegisterID
         end
     end
     def x86CallOperand(kind)
-        "*#{x86Operand(kind)}"
+        isX64 ? "*#{x86Operand(:quad)}" : "*#{x86Operand(:ptr)}"
+    end
+    def x86PushOperand(kind)
+        isX64 ? "#{x86Operand(:quad)}" : "#{x86Operand(:ptr)}"
     end
 end
 
@@ -291,6 +325,9 @@ class Immediate
     def x86CallOperand(kind)
         "#{value}"
     end
+    def x86PushOperand(kind)
+        "$#{value}"
+    end
 end
 
 class Address
@@ -307,6 +344,9 @@ class Address
     def x86CallOperand(kind)
         "*#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(kind)}"
+    end
 end
 
 class BaseIndex
@@ -325,6 +365,9 @@ class BaseIndex
     def x86CallOperand(kind)
         "*#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(kind)}"
+    end
 end
 
 class AbsoluteAddress
@@ -343,6 +386,9 @@ class AbsoluteAddress
     def x86CallOperand(kind)
         "*#{address.value}"
     end
+    def x86PushOperand(kind)
+        "#{address.value}"
+    end
 end
 
 class LabelReference
@@ -396,6 +442,9 @@ class Sequence
         
         return newList
     end
+    def getModifiedListX32
+        return getModifiedListX86_64
+    end
 end
 
 class Instruction
@@ -418,7 +467,7 @@ class Instruction
         when :int
             "l"
         when :ptr
-            isX64 ? "q" : "l"
+            isX64 && !isX32 ? "q" : "l"
         when :quad
             isX64 ? "q" : raise
         when :double
@@ -437,7 +486,7 @@ class Instruction
         when :int
             4
         when :ptr
-            isX64 ? 8 : 4
+            isX64 && !isX32 ? 8 : 4
         when :quad
             isX64 ? 8 : raise
         when :double
@@ -466,6 +515,19 @@ class Instruction
         handleX86OpWithNumOperands(opcode, kind, operands.size)
     end
     
+    def handleX86Jump(opcode, kind)
+        if isX32
+            if operands[0].is_a? Address or operands[0].is_a? BaseIndex or operands[0].is_a? AbsoluteAddress
+                $asm.puts "mov#{x86Suffix(kind)} #{operands[0].x86Operand(kind)}, #{X64_SCRATCH_REGISTER.x86Operand(kind)}"
+                $asm.puts "#{opcode} #{X64_SCRATCH_REGISTER.x86CallOperand(kind)}"
+            else
+                $asm.puts "#{opcode} #{operands[0].x86CallOperand(kind)}"
+            end
+        else
+            $asm.puts "#{opcode} #{operands[0].x86CallOperand(kind)}"
+        end
+    end
+
     def handleX86Shift(opcode, kind)
         if operands[0].is_a? Immediate or operands[0] == RegisterID.forName(nil, "t2")
             $asm.puts "#{opcode} #{operands[0].x86Operand(:byte)}, #{operands[1].x86Operand(kind)}"
@@ -660,6 +722,11 @@ class Instruction
         lowerX86Common
     end
     
+    def lowerX32
+        raise unless $activeBackend == "X32"
+        lowerX86Common
+    end
+    
     def lowerX86Common
         $asm.codeOrigin codeOriginString if $enableCodeOriginComments
         $asm.annotation annotation if $enableInstrAnnotations
@@ -825,9 +892,9 @@ class Instruction
         when "movdz"
             $asm.puts "xorpd #{operands[0].x86Operand(:double)}, #{operands[0].x86Operand(:double)}"
         when "pop"
-            $asm.puts "pop #{operands[0].x86Operand(:ptr)}"
+            $asm.puts "pop #{operands[0].x86PushOperand(:ptr)}"
         when "push"
-            $asm.puts "push #{operands[0].x86Operand(:ptr)}"
+            $asm.puts "push #{operands[0].x86PushOperand(:ptr)}"
         when "move"
             handleMove
         when "sxi2q"
@@ -941,7 +1008,8 @@ class Instruction
         when "btbnz"
             handleX86BranchTest("jnz", :byte)
         when "jmp"
-            $asm.puts "jmp #{operands[0].x86CallOperand(:ptr)}"
+            #$asm.puts "jmp #{operands[0].x86CallOperand(:ptr)}"
+            handleX86Jump("jmp", :ptr)
         when "baddio"
             handleX86OpBranch("addl", "jo", :int)
         when "baddpo"
@@ -993,7 +1061,8 @@ class Instruction
         when "break"
             $asm.puts "int $3"
         when "call"
-            $asm.puts "call #{operands[0].x86CallOperand(:ptr)}"
+            # $asm.puts "call #{operands[0].x86CallOperand(:ptr)}"
+            handleX86Jump("call", :ptr)
         when "ret"
             $asm.puts "ret"
         when "cieq"
