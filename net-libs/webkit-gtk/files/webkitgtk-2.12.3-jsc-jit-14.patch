diff -ur webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h	2016-07-27 06:27:00.659580694 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h	2016-07-27 06:46:49.248503991 -0700
@@ -1534,7 +1534,7 @@
     void push(Address address)
     {
 #if CPU(X32)
-        m_assembler.movq_mr(address.offset, address.base, scratchRegister());
+        load32(address, scratchRegister());
         m_assembler.push_r(scratchRegister());
 #else
         m_assembler.push_m(address.offset, address.base);
diff -ur webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h	2016-07-27 06:27:00.913580678 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h	2016-07-27 06:54:24.468474615 -0700
@@ -1362,7 +1362,7 @@
     {
         const int rexBytes = 1;
         const int opcodeBytes = 1;
-        const int immediateBytes = 8;
+        const int immediateBytes = sizeof(void*);
         const int totalBytes = rexBytes + opcodeBytes + immediateBytes;
         ASSERT(totalBytes >= maxJumpReplacementSize());
         return label.labelAtOffset(-totalBytes);
@@ -1390,7 +1390,11 @@
     
     static void revertJumpReplacementToPatchableBranchPtrWithPatch(CodeLocationLabel instructionStart, Address, void* initialValue)
     {
-        X86Assembler::revertJumpTo_movq_i64r(instructionStart.executableAddress(), reinterpret_cast<intptr_t>(initialValue), s_scratchRegister);
+#if CPU(X32)
+        X86Assembler::revertJumpTo_movl_i32r(instructionStart.executableAddress(), reinterpret_cast<uintptr_t>(initialValue), s_scratchRegister);
+#else
+        X86Assembler::revertJumpTo_movq_i64r(instructionStart.executableAddress(), reinterpret_cast<uintptr_t>(initialValue), s_scratchRegister);
+#endif
     }
 
     static void revertJumpReplacementToPatchableBranch32WithPatch(CodeLocationLabel instructionStart, Address, int32_t initialValue)
@@ -1400,7 +1404,11 @@
 
     static void revertJumpReplacementToBranchPtrWithPatch(CodeLocationLabel instructionStart, RegisterID, void* initialValue)
     {
-        X86Assembler::revertJumpTo_movq_i64r(instructionStart.executableAddress(), reinterpret_cast<intptr_t>(initialValue), s_scratchRegister);
+#if CPU(X32)
+        X86Assembler::revertJumpTo_movl_i32r(instructionStart.executableAddress(), reinterpret_cast<uintptr_t>(initialValue), s_scratchRegister);
+#else
+        X86Assembler::revertJumpTo_movq_i64r(instructionStart.executableAddress(), reinterpret_cast<uintptr_t>(initialValue), s_scratchRegister);
+#endif
     }
 
     static void repatchCall(CodeLocationCall call, CodeLocationLabel destination)
diff -ur webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGEdge.h webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGEdge.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGEdge.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGEdge.h	2016-07-27 07:08:19.527420726 -0700
@@ -38,7 +38,7 @@
 class Edge {
 public:
     explicit Edge(Node* node = 0, UseKind useKind = UntypedUse, ProofStatus proofStatus = NeedsCheck, KillStatus killStatus = DoesNotKill)
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         : m_encodedWord(makeWord(node, useKind, proofStatus, killStatus))
 #else
         : m_node(node)
@@ -47,7 +47,7 @@
     {
     }
     
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
     Node* node() const { return bitwise_cast<Node*>(m_encodedWord >> shift()); }
 #else
     Node* node() const { return m_node; }
@@ -58,7 +58,7 @@
     
     void setNode(Node* node)
     {
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         m_encodedWord = makeWord(node, useKind(), proofStatus(), killStatus());
 #else
         m_node = node;
@@ -67,7 +67,7 @@
     
     UseKind useKindUnchecked() const
     {
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         unsigned masked = m_encodedWord & (((1 << shift()) - 1));
         unsigned shifted = masked >> 2;
 #else
@@ -86,7 +86,7 @@
     void setUseKind(UseKind useKind)
     {
         ASSERT(node());
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         m_encodedWord = makeWord(node(), useKind, proofStatus(), killStatus());
 #else
         m_encodedWord = makeWord(useKind, proofStatus(), killStatus());
@@ -105,7 +105,7 @@
     void setProofStatus(ProofStatus proofStatus)
     {
         ASSERT(node());
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         m_encodedWord = makeWord(node(), useKind(), proofStatus, killStatus());
 #else
         m_encodedWord = makeWord(useKind(), proofStatus, killStatus());
@@ -137,7 +137,7 @@
     void setKillStatus(KillStatus killStatus)
     {
         ASSERT(node());
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         m_encodedWord = makeWord(node(), useKind(), proofStatus(), killStatus);
 #else
         m_encodedWord = makeWord(useKind(), proofStatus(), killStatus);
@@ -151,7 +151,7 @@
     Edge sanitized() const
     {
         Edge result = *this;
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         result.m_encodedWord = makeWord(node(), useKindUnchecked(), NeedsCheck, DoesNotKill);
 #else
         result.m_encodedWord = makeWord(useKindUnchecked(), NeedsCheck, DoesNotKill);
@@ -164,7 +164,7 @@
     
     bool operator==(Edge other) const
     {
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         return m_encodedWord == other.m_encodedWord;
 #else
         return m_node == other.m_node && m_encodedWord == other.m_encodedWord;
@@ -179,7 +179,7 @@
     
     unsigned hash() const
     {
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
         return IntHash<uintptr_t>::hash(m_encodedWord);
 #else
         return PtrHash<Node*>::hash(m_node) + m_encodedWord;
@@ -189,7 +189,7 @@
 private:
     friend class AdjacencyList;
     
-#if USE(JSVALUE64)
+#if USE(JSVALUE64) && !CPU(X32)
     static uint32_t shift() { return 7; }
     
     static uintptr_t makeWord(Node* node, UseKind useKind, ProofStatus proofStatus, KillStatus killStatus)
diff -ur webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGNode.h webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGNode.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGNode.h	2016-07-27 06:27:00.184580725 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGNode.h	2016-07-27 07:09:28.655416265 -0700
@@ -226,7 +226,7 @@
     OpInfo() : m_value(0) { }
     explicit OpInfo(int32_t value) : m_value(static_cast<uintptr_t>(value)) { }
     explicit OpInfo(uint32_t value) : m_value(static_cast<uintptr_t>(value)) { }
-#if !CPU(X32) && (OS(DARWIN) || USE(JSVALUE64))
+#if !CPU(X32) && (OS(DARWIN) || (CPU(X86_64) && !CPU(X32)))
     explicit OpInfo(size_t value) : m_value(static_cast<uintptr_t>(value)) { }
 #endif
     explicit OpInfo(void* value) : m_value(reinterpret_cast<uintptr_t>(value)) { }
diff -ur webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/JITCall.cpp webkitgtk-2.12.3/Source/JavaScriptCore/jit/JITCall.cpp
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/JITCall.cpp	2016-07-27 06:27:00.187580725 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/jit/JITCall.cpp	2016-07-27 07:16:36.870388631 -0700
@@ -110,6 +110,10 @@
     info->setUpCall(CallLinkInfo::Call, CodeOrigin(m_bytecodeOffset), regT0);
 
     linkSlowCase(iter);
+#if CPU(X32)
+    linkSlowCase(iter);
+#endif
+
     int registerOffset = -instruction[4].u.operand;
 
     addPtr(TrustedImm32(registerOffset * sizeof(Register) + sizeof(CallerFrameAndPC)), callFrameRegister, stackPointerRegister);
@@ -241,10 +245,6 @@
         return;
     }
 
-#if CPU(X32)
-    linkSlowCase(iter);
-#endif
-
     if (opcodeID == op_tail_call || opcodeID == op_tail_call_varargs)
         emitRestoreCalleeSaves();
 
