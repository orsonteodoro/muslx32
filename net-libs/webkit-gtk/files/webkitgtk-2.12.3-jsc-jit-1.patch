diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h	2016-05-23 03:03:35.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h	2016-07-24 16:06:21.851064350 -0700
@@ -299,7 +299,7 @@
         {
         }
 
-#if !CPU(X86_64)
+#if !CPU(X86_64) || CPU(X32)
         explicit TrustedImm32(TrustedImmPtr ptr)
             : m_value(ptr.asIntptr())
         {
@@ -315,7 +315,7 @@
             : TrustedImm32(value)
         {
         }
-#if !CPU(X86_64)
+#if !CPU(X86_64) || CPU(X32)
         explicit Imm32(TrustedImmPtr ptr)
             : TrustedImm32(ptr)
         {
@@ -339,7 +339,7 @@
         {
         }
 
-#if CPU(X86_64) || CPU(ARM64)
+#if (CPU(X86_64) && !CPU(X32)) || CPU(ARM64)
         explicit TrustedImm64(TrustedImmPtr ptr)
             : m_value(ptr.asIntptr())
         {
@@ -355,7 +355,7 @@
             : TrustedImm64(value)
         {
         }
-#if CPU(X86_64) || CPU(ARM64)
+#if (CPU(X86_64) && !CPU(X32)) || CPU(ARM64)
         explicit Imm64(TrustedImmPtr ptr)
             : TrustedImm64(ptr)
         {
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssembler.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssembler.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssembler.h	2016-05-23 03:03:35.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssembler.h	2016-07-24 17:52:31.341653309 -0700
@@ -506,7 +506,7 @@
     // Ptr methods
     // On 32-bit platforms (i.e. x86), these methods directly map onto their 32-bit equivalents.
     // FIXME: should this use a test for 32-bitness instead of this specific exception?
-#if !CPU(X86_64) && !CPU(ARM64)
+#if !CPU(X86_64) && !CPU(ARM64) || CPU(X32)
     void addPtr(Address src, RegisterID dest)
     {
         add32(src, dest);
@@ -688,11 +688,6 @@
         store32(TrustedImm32(imm), address);
     }
     
-    void storePtr(ImmPtr imm, Address address)
-    {
-        store32(Imm32(imm.asTrustedImmPtr()), address);
-    }
-
     void storePtr(TrustedImmPtr imm, void* address)
     {
         store32(TrustedImm32(imm), address);
@@ -723,11 +718,6 @@
         return branch32(cond, left, TrustedImm32(right));
     }
     
-    Jump branchPtr(RelationalCondition cond, RegisterID left, ImmPtr right)
-    {
-        return branch32(cond, left, Imm32(right.asTrustedImmPtr()));
-    }
-
     Jump branchPtr(RelationalCondition cond, RegisterID left, Address right)
     {
         return branch32(cond, left, right);
@@ -793,6 +783,28 @@
         return MacroAssemblerBase::branchTest8(cond, Address(address.base, address.offset), mask);
     }
 
+#if !CPU(X32)
+    void move(ImmPtr imm, RegisterID dest)
+    {
+        move(Imm32(imm.asTrustedImmPtr()), dest);
+    }
+
+    void storePtr(ImmPtr imm, Address address)
+    {
+        store32(Imm32(imm.asTrustedImmPtr()), address);
+    }
+
+    Jump branchPtr(RelationalCondition cond, RegisterID left, ImmPtr right)
+    {
+        return branch32(cond, left, Imm32(right.asTrustedImmPtr()));
+    }
+#else
+    void rotateRightPtr(TrustedImm32 imm, RegisterID srcDst)
+    {
+        rotateRight32(imm, srcDst);
+    }
+#endif
+
 #else // !CPU(X86_64)
 
     void addPtr(RegisterID src, RegisterID dest)
@@ -1099,6 +1111,9 @@
     {
         return branchSub64(cond, src1, src2, dest);
     }
+#endif // !CPU(X86_64) || CPU(X32)
+
+#if CPU(X86_64)
 
     using MacroAssemblerBase::and64;
     using MacroAssemblerBase::convertInt32ToDouble;
@@ -1152,10 +1167,12 @@
         case 0xffff:
         case 0xffffff:
         case 0xffffffffL:
+#if !CPU(X32)
         case 0xffffffffffL:
         case 0xffffffffffffL:
         case 0xffffffffffffffL:
         case 0xffffffffffffffffL:
+#endif
             return false;
         default: {
             if (value <= 0xff)
@@ -1329,7 +1346,7 @@
             store64(imm.asTrustedImm64(), dest);
     }
 
-#endif // !CPU(X86_64)
+#endif // CPU(X86_64)
 
 #if ENABLE(B3_JIT)
     // We should implement this the right way eventually, but for now, it's fine because it arises so
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h	2016-05-23 03:03:35.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h	2016-07-24 17:41:39.682695363 -0700
@@ -1533,7 +1533,12 @@
 
     void push(Address address)
     {
+#if CPU(X32)
+        m_assembler.movq_mr(address.offset, address.base, scratchRegister());
+        m_assembler.push_r(scratchRegister());
+#else
         m_assembler.push_m(address.offset, address.base);
+#endif
     }
 
     void push(TrustedImm32 imm)
@@ -1567,10 +1572,17 @@
 
     void move(TrustedImmPtr imm, RegisterID dest)
     {
+#if CPU(X32)
+        if (!imm.m_value)
+            m_assembler.xorl_rr(dest, dest);
+        else
+            m_assembler.movl_i32r(imm.asIntptr(), dest);
+#else
         if (!imm.m_value)
             m_assembler.xorq_rr(dest, dest);
         else
             m_assembler.movq_i64r(imm.asIntptr(), dest);
+#endif
     }
 
     void move(TrustedImm64 imm, RegisterID dest)
@@ -2091,7 +2103,12 @@
     // Address is a memory location containing the address to jump to
     void jump(Address address)
     {
+#if CPU(X32)
+        load32(address, scratchRegister());
+        m_assembler.jmp_r(scratchRegister());
+#else
         m_assembler.jmp_m(address.offset, address.base);
+#endif
     }
 
 
@@ -2275,7 +2292,12 @@
 
     void call(Address address)
     {
+#if CPU(X32)
+        load32(address, scratchRegister());
+        m_assembler.call(scratchRegister());
+#else
         m_assembler.call_m(address.offset, address.base);
+#endif
     }
 
     void ret()
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h	2016-05-23 03:03:35.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h	2016-07-24 17:34:11.547724282 -0700
@@ -38,10 +38,15 @@
 
 class MacroAssemblerX86_64 : public MacroAssemblerX86Common {
 public:
+#if CPU(X32)
+    static const Scale ScalePtr = TimesFour;
+#else
     static const Scale ScalePtr = TimesEight;
+#endif
 
     using MacroAssemblerX86Common::add32;
     using MacroAssemblerX86Common::and32;
+    using MacroAssemblerX86Common::branch32;
     using MacroAssemblerX86Common::branchAdd32;
     using MacroAssemblerX86Common::or32;
     using MacroAssemblerX86Common::sub32;
@@ -119,6 +124,11 @@
         m_assembler.cvtsi2sd_rr(scratchRegister(), dest);
     }
 
+    void rotateRight32(TrustedImm32 imm, RegisterID srcDst)
+    {
+        m_assembler.rorl_i8r(imm.m_value, srcDst);
+    }
+
     void store32(TrustedImm32 imm, void* address)
     {
         move(TrustedImmPtr(address), scratchRegister());
@@ -135,6 +145,28 @@
         }
     }
     
+    //void store32(RegisterID src, void* address)
+    //{
+    //    if (src == X86Registers::eax)
+    //        m_assembler.movl_EAXm(address);
+    //    else {
+    //        move(TrustedImmPtr(address), scratchRegister());
+    //        store32(src, scratchRegister());
+    //    }
+    //}
+    
+    Jump branch32(RelationalCondition cond, AbsoluteAddress left, RegisterID right)
+    {
+        move(TrustedImmPtr(left.m_ptr), scratchRegister());
+        return branch32(cond, Address(scratchRegister()), right);
+    }
+
+    Jump branch32(RelationalCondition cond, AbsoluteAddress left, TrustedImm32 right)
+    {
+        move(TrustedImmPtr(left.m_ptr), scratchRegister());
+        return branch32(cond, left, right);
+    }
+
     void store8(TrustedImm32 imm, void* address)
     {
         move(TrustedImmPtr(address), scratchRegister());
@@ -1147,34 +1179,54 @@
     ConvertibleLoadLabel convertibleLoadPtr(Address address, RegisterID dest)
     {
         ConvertibleLoadLabel result = ConvertibleLoadLabel(this);
+#if CPU(X32)
+        m_assembler.movl_mr(address.offset, address.base, dest);
+#else
         m_assembler.movq_mr(address.offset, address.base, dest);
+#endif
         return result;
     }
 
     DataLabelPtr moveWithPatch(TrustedImmPtr initialValue, RegisterID dest)
     {
         padBeforePatch();
+#if CPU(X32)
+        m_assembler.movl_i32r(initialValue.asIntptr(), dest);
+#else
         m_assembler.movq_i64r(initialValue.asIntptr(), dest);
+#endif
         return DataLabelPtr(this);
     }
 
     DataLabelPtr moveWithPatch(TrustedImm32 initialValue, RegisterID dest)
     {
         padBeforePatch();
+#if CPU(X32)
+        m_assembler.movl_i32r(initialValue.m_value, dest);
+#else
         m_assembler.movq_i64r(initialValue.m_value, dest);
+#endif
         return DataLabelPtr(this);
     }
 
     Jump branchPtrWithPatch(RelationalCondition cond, RegisterID left, DataLabelPtr& dataLabel, TrustedImmPtr initialRightValue = TrustedImmPtr(0))
     {
         dataLabel = moveWithPatch(initialRightValue, scratchRegister());
+#if CPU(X32)
+        return branch32(cond, left, scratchRegister());
+#else
         return branch64(cond, left, scratchRegister());
+#endif
     }
 
     Jump branchPtrWithPatch(RelationalCondition cond, Address left, DataLabelPtr& dataLabel, TrustedImmPtr initialRightValue = TrustedImmPtr(0))
     {
         dataLabel = moveWithPatch(initialRightValue, scratchRegister());
+#if CPU(X32)
+        return branch32(cond, left, scratchRegister());
+#else
         return branch64(cond, left, scratchRegister());
+#endif
     }
 
     Jump branch32WithPatch(RelationalCondition cond, Address left, DataLabel32& dataLabel, TrustedImm32 initialRightValue = TrustedImm32(0))
@@ -1188,7 +1240,11 @@
     DataLabelPtr storePtrWithPatch(TrustedImmPtr initialValue, ImplicitAddress address)
     {
         DataLabelPtr label = moveWithPatch(initialValue, scratchRegister());
+#if CPU(X32)
+        store32(scratchRegister(), address);
+#else
         store64(scratchRegister(), address);
+#endif
         return label;
     }
 
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/X86Assembler.h webkitgtk-2.12.3/Source/JavaScriptCore/assembler/X86Assembler.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/assembler/X86Assembler.h	2016-05-23 03:03:35.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/assembler/X86Assembler.h	2016-07-24 16:42:53.981922886 -0700
@@ -1015,6 +1015,16 @@
     {
         m_formatter.twoByteOp64(OP2_BSR, dst, base, offset);
     }
+
+    void rorl_i8r(int imm, RegisterID dst)
+    {
+        if (imm == 1)
+            m_formatter.oneByteOp(OP_GROUP2_Ev1, GROUP2_OP_ROR, dst);
+        else {
+            m_formatter.oneByteOp(OP_GROUP2_EvIb, GROUP2_OP_ROR, dst);
+            m_formatter.immediate8(imm);
+        }
+    }
 #endif
 
     void sarl_i8r(int imm, RegisterID dst)
@@ -1402,6 +1412,11 @@
         m_formatter.oneByteOp64(OP_TEST_EvGv, src, base, offset);
     }
 
+    void testl_rm(RegisterID src, int offset, RegisterID base)
+    {
+        m_formatter.oneByteOp(OP_TEST_EvGv, src, base, offset);
+    }
+
     void testq_i32r(int imm, RegisterID dst)
     {
         if (dst == X86Registers::eax)
@@ -1554,7 +1569,7 @@
     {
         m_formatter.oneByteOp(OP_MOV_EAXOv);
 #if CPU(X86_64)
-        m_formatter.immediate64(reinterpret_cast<int64_t>(addr));
+        m_formatter.immediate64(reinterpret_cast<uintptr_t>(addr));
 #else
         m_formatter.immediate32(reinterpret_cast<int>(addr));
 #endif
@@ -1657,7 +1672,7 @@
     {
         m_formatter.oneByteOp(OP_MOV_OvEAX);
 #if CPU(X86_64)
-        m_formatter.immediate64(reinterpret_cast<int64_t>(addr));
+        m_formatter.immediate64(reinterpret_cast<uintptr_t>(addr));
 #else
         m_formatter.immediate32(reinterpret_cast<int>(addr));
 #endif
@@ -1687,13 +1702,13 @@
     void movq_mEAX(const void* addr)
     {
         m_formatter.oneByteOp64(OP_MOV_EAXOv);
-        m_formatter.immediate64(reinterpret_cast<int64_t>(addr));
+        m_formatter.immediate64(reinterpret_cast<uintptr_t>(addr));
     }
 
     void movq_EAXm(const void* addr)
     {
         m_formatter.oneByteOp64(OP_MOV_OvEAX);
-        m_formatter.immediate64(reinterpret_cast<int64_t>(addr));
+        m_formatter.immediate64(reinterpret_cast<uintptr_t>(addr));
     }
 
     void movq_mr(int offset, RegisterID base, RegisterID dst)
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGNode.h webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGNode.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGNode.h	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGNode.h	2016-07-24 16:38:48.397938734 -0700
@@ -226,7 +226,7 @@
     OpInfo() : m_value(0) { }
     explicit OpInfo(int32_t value) : m_value(static_cast<uintptr_t>(value)) { }
     explicit OpInfo(uint32_t value) : m_value(static_cast<uintptr_t>(value)) { }
-#if OS(DARWIN) || USE(JSVALUE64)
+#if !CPU(X32) && (OS(DARWIN) || USE(JSVALUE64))
     explicit OpInfo(size_t value) : m_value(static_cast<uintptr_t>(value)) { }
 #endif
     explicit OpInfo(void* value) : m_value(reinterpret_cast<uintptr_t>(value)) { }
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp	2016-07-24 16:31:10.714968270 -0700
@@ -831,6 +831,10 @@
     JITCompiler::DataLabelPtr targetToCheck;
     JITCompiler::Jump slowPath = m_jit.branchPtrWithPatch(MacroAssembler::NotEqual, calleeGPR, targetToCheck, MacroAssembler::TrustedImmPtr(0));
 
+#if CPU(X32)
+    slowPath.append(m_jit.branchTest64(MacroAssembler::NonZero, calleeGPR, GPRInfo::tagMaskRegister));
+#endif
+
     if (isTail) {
         if (node->op() == TailCall) {
             callLinkInfo->setFrameShuffleData(shuffleData);
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/ExecutableAllocator.h webkitgtk-2.12.3/Source/JavaScriptCore/jit/ExecutableAllocator.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/ExecutableAllocator.h	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/jit/ExecutableAllocator.h	2016-07-24 16:23:00.039999934 -0700
@@ -78,7 +78,7 @@
 static const size_t fixedExecutableMemoryPoolSize = 16 * 1024 * 1024;
 #elif CPU(ARM64)
 static const size_t fixedExecutableMemoryPoolSize = 32 * 1024 * 1024;
-#elif CPU(X86_64)
+#elif CPU(X86_64) && !CPU(X32)
 static const size_t fixedExecutableMemoryPoolSize = 1024 * 1024 * 1024;
 #else
 static const size_t fixedExecutableMemoryPoolSize = 32 * 1024 * 1024;
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/JITCall.cpp webkitgtk-2.12.3/Source/JavaScriptCore/jit/JITCall.cpp
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/JITCall.cpp	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/jit/JITCall.cpp	2016-07-24 16:22:34.380001590 -0700
@@ -185,6 +185,11 @@
     Jump slowCase = branchPtrWithPatch(NotEqual, regT0, addressOfLinkedFunctionCheck, TrustedImmPtr(0));
     addSlowCase(slowCase);
 
+#if CPU(X32)
+    // The above branchPtr doesn't catch the case where the callee isn't a cell.
+    addSlowCase(branchTest64(NonZero, regT0, tagMaskRegister));
+#endif
+
     ASSERT(m_callCompilationInfo.size() == callLinkInfoIndex);
     info->setUpCall(CallLinkInfo::callTypeFor(opcodeID), CodeOrigin(m_bytecodeOffset), regT0);
     m_callCompilationInfo.append(CallCompilationInfo());
@@ -236,7 +241,9 @@
         return;
     }
 
+#if CPU(X32)
     linkSlowCase(iter);
+#endif
 
     if (opcodeID == op_tail_call || opcodeID == op_tail_call_varargs)
         emitRestoreCalleeSaves();
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/JITOperations.cpp webkitgtk-2.12.3/Source/JavaScriptCore/jit/JITOperations.cpp
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/jit/JITOperations.cpp	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/jit/JITOperations.cpp	2016-07-24 16:34:50.620954079 -0700
@@ -2123,6 +2123,7 @@
 
 #if COMPILER(GCC_OR_CLANG) && CPU(X86_64)
 asm (
+".text" "\n" \
 ".globl " SYMBOL_STRING(getHostCallReturnValue) "\n"
 HIDE_SYMBOL(getHostCallReturnValue) "\n"
 SYMBOL_STRING(getHostCallReturnValue) ":" "\n"
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/MatchResult.h webkitgtk-2.12.3/Source/JavaScriptCore/runtime/MatchResult.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/MatchResult.h	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/runtime/MatchResult.h	2016-07-24 16:16:40.538024425 -0700
@@ -64,8 +64,13 @@
         return start == end;
     }
 
+#if CPU(X32)
+    uint64_t start;
+    uint64_t end;
+#else
     size_t start;
     size_t end;
+#endif
 };
 
 #endif
diff -urN webkitgtk-2.12.3.orig/Source/WTF/wtf/Platform.h webkitgtk-2.12.3/Source/WTF/wtf/Platform.h
--- webkitgtk-2.12.3.orig/Source/WTF/wtf/Platform.h	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/WTF/wtf/Platform.h	2016-07-24 16:15:54.864027372 -0700
@@ -168,6 +168,9 @@
 #if   defined(__x86_64__) \
     || defined(_M_X64)
 #define WTF_CPU_X86_64 1
+#if defined(__ILP32__)
+#define WTF_CPU_X32 1
+#endif
 #endif
 
 /* CPU(ARM64) - Apple */
