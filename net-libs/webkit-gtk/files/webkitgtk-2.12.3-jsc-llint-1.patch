diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h webkitgtk-2.12.3/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/llint/LLIntOfflineAsmConfig.h	2016-07-24 10:02:04.861474842 -0700
@@ -34,6 +34,7 @@
 #define OFFLINE_ASM_C_LOOP 1
 #define OFFLINE_ASM_X86 0
 #define OFFLINE_ASM_X86_WIN 0
+#define OFFLINE_ASM_X32 0
 #define OFFLINE_ASM_ARM 0
 #define OFFLINE_ASM_ARMv7 0
 #define OFFLINE_ASM_ARMv7_TRADITIONAL 0
@@ -92,7 +93,13 @@
 #define OFFLINE_ASM_ARM 0
 #endif
 
-#if CPU(X86_64) && !PLATFORM(WIN)
+#if CPU(X86_64) && CPU(X32) && !PLATFORM(WIN)
+#define OFFLINE_ASM_X32 1
+#else
+#define OFFLINE_ASM_X32 0
+#endif
+
+#if CPU(X86_64) && !CPU(X32) && !PLATFORM(WIN)
 #define OFFLINE_ASM_X86_64 1
 #else
 #define OFFLINE_ASM_X86_64 0
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter.asm webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter.asm
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter.asm	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter.asm	2016-07-24 10:18:14.975412238 -0700
@@ -277,18 +277,31 @@
         const tagMask = csr2
     end
 
-    macro loadisFromInstruction(offset, dest)
-        loadis offset * 8[PB, PC, 8], dest
-    end
+    if X32
+        macro loadisFromInstruction(offset, dest)
+            loadis offset * 4[PB, PC, 4], dest
+        end
     
-    macro loadpFromInstruction(offset, dest)
-        loadp offset * 8[PB, PC, 8], dest
-    end
+        macro loadpFromInstruction(offset, dest)
+           loadp offset * 4[PB, PC, 4], dest
+        end
+    
+        macro storepToInstruction(value, offset)
+           storep value, offset * 4[PB, PC, 4]
+        end
+    else
+        macro loadisFromInstruction(offset, dest)
+           loadis offset * 8[PB, PC, 8], dest
+        end
     
-    macro storepToInstruction(value, offset)
-        storep value, offset * 8[PB, PC, 8]
+        macro loadpFromInstruction(offset, dest)
+           loadp offset * 8[PB, PC, 8], dest
+        end
+    
+        macro storepToInstruction(value, offset)
+           storep value, offset * 8[PB, PC, 8]
+        end
     end
-
 else
     const PC = t4 # When changing this, make sure LLIntPC is up to date in LLIntPCRanges.h
     macro loadisFromInstruction(offset, dest)
@@ -375,7 +388,11 @@
 
 # Allocation constants
 if JSVALUE64
-    const JSFinalObjectSizeClassIndex = 1
+    if X32
+        const JSFinalObjectSizeClassIndex = 3
+    else
+        const JSFinalObjectSizeClassIndex = 1
+    end
 else
     const JSFinalObjectSizeClassIndex = 3
 end
@@ -383,7 +400,11 @@
 # This must match wtf/Vector.h
 const VectorBufferOffset = 0
 if JSVALUE64
-    const VectorSizeOffset = 12
+    if X32
+        const VectorSizeOffset = 8
+    else
+        const VectorSizeOffset = 12
+    end
 else
     const VectorSizeOffset = 8
 end
@@ -653,7 +674,7 @@
     if C_LOOP or ARM or ARMv7 or ARMv7_TRADITIONAL or ARM64 or MIPS or SH4
         # In C_LOOP case, we're only preserving the bytecode vPC.
         move lr, destinationRegister
-    elsif X86 or X86_WIN or X86_64 or X86_64_WIN
+    elsif X86 or X86_WIN or X86_64 or X86_64_WIN or X32
         pop destinationRegister
     else
         error
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm	2016-05-23 03:03:36.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/llint/LowLevelInterpreter64.asm	2016-07-24 10:31:05.803362494 -0700
@@ -24,7 +24,11 @@
 
 # Utilities.
 macro jumpToInstruction()
-    jmp [PB, PC, 8]
+    if X32
+        jmp [PB, PC, 4]
+    else
+        jmp [PB, PC, 8]
+    end
 end
 
 macro dispatch(advance)
@@ -38,7 +42,11 @@
 end
 
 macro dispatchIntIndirect(offset)
-    dispatchInt(offset * 8[PB, PC, 8])
+    if X32
+        dispatchInt(offset * 4[PB, PC, 4])
+    else
+        dispatchInt(offset * 8[PB, PC, 8])
+    end
 end
 
 macro dispatchAfterCall()
@@ -53,7 +61,7 @@
 
 macro cCall2(function)
     checkStackPointerAlignment(t4, 0xbad0c002)
-    if X86_64 or ARM64
+    if X86_64 or ARM64 or X32
         call function
     elsif X86_64_WIN
         # Note: this implementation is only correct if the return type size is > 8 bytes.
@@ -295,13 +303,21 @@
 
 
 macro prepareStateForCCall()
-    leap [PB, PC, 8], PC
+    if X32
+        leap [PB, PC, 4], PC
+    else
+        leap [PB, PC, 8], PC
+    end
 end
 
 macro restoreStateAfterCCall()
     move r0, PC
     subp PB, PC
-    rshiftp 3, PC
+    if X32
+        rshiftp 2, PC
+    else
+        rshiftp 3, PC
+    end
 end
 
 macro callSlowPath(slowPath)
@@ -1633,7 +1649,11 @@
     loadisFromInstruction(2, t1)
     loadp CodeBlock[cfr], t2
     loadp CodeBlock::m_globalObject[t2], t2
-    loadp JSGlobalObject::m_specialPointers[t2, t1, 8], t1
+    if X32
+        loadp JSGlobalObject::m_specialPointers[t2, t1, 4], t1
+    else
+        loadp JSGlobalObject::m_specialPointers[t2, t1, 8], t1
+    end
     bpneq t1, [cfr, t0, 8], .opJneqPtrTarget
     dispatch(4)
 
@@ -1823,7 +1843,11 @@
     loadp CodeBlock::m_instructions[PB], PB
     loadp VM::targetInterpreterPCForThrow[t3], PC
     subp PB, PC
-    rshiftp 3, PC
+    if X32
+        rshiftp 2, PC
+    else
+        rshiftp 3, PC
+    end
 
     callSlowPath(_llint_slow_path_check_if_exception_is_uncatchable_and_notify_profiler)
     bpeq r1, 0, .isCatchableException
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/backends.rb webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/backends.rb
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/backends.rb	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/backends.rb	2016-07-24 10:32:11.649358245 -0700
@@ -36,6 +36,7 @@
      "X86_WIN",
      "X86_64",
      "X86_64_WIN",
+     "X32",
      "ARM",
      "ARMv7",
      "ARMv7_TRADITIONAL",
@@ -56,6 +57,7 @@
      "X86_WIN",
      "X86_64",
      "X86_64_WIN",
+     "X32",
      "ARM",
      "ARMv7",
      "ARMv7_TRADITIONAL",
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/instructions.rb webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/instructions.rb
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/instructions.rb	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/instructions.rb	2016-07-24 10:35:12.042346604 -0700
@@ -258,6 +258,56 @@
      "idivi"
     ]
 
+X86_64_INSTRUCTIONS =
+    [
+     "lshiftq",
+     "negq",
+     "rshiftq",
+     "urshiftq",
+     "tqs",
+     "tqz",
+     "tqnz",
+     "peekq",
+     "pokeq",
+     "fq2d",
+     "fd2q",
+     "bqeq",
+     "bqneq",
+     "bqa",
+     "bqaeq",
+     "bqb",
+     "bqbeq",
+     "bqgt",
+     "bqgteq",
+     "bqlt",
+     "bqlteq",
+     "addq",
+     "mulq",
+     "andq",
+     "orq",
+     "subq",
+     "xorq",
+     "loadq",
+     "cqeq",
+     "cqneq",
+     "cqa",
+     "cqaeq",
+     "cqb",
+     "cqbeq",
+     "cqgt",
+     "cqgteq",
+     "cqlt",
+     "cqlteq",
+     "storeq",
+     "btqs",
+     "btqz",
+     "btqnz",
+     "baddqo",
+     "baddqs",
+     "baddqz",
+     "baddqnz"
+    ]
+
 ARM_INSTRUCTIONS =
     [
      "clrbp",
@@ -324,7 +374,7 @@
      "cloopDo",              # no operands
     ]
 
-INSTRUCTIONS = MACRO_INSTRUCTIONS + X86_INSTRUCTIONS + ARM_INSTRUCTIONS + ARM64_INSTRUCTIONS + RISC_INSTRUCTIONS + MIPS_INSTRUCTIONS + SH4_INSTRUCTIONS + CXX_INSTRUCTIONS
+INSTRUCTIONS = MACRO_INSTRUCTIONS + X86_INSTRUCTIONS + X86_64_INSTRUCTIONS + ARM_INSTRUCTIONS + ARM64_INSTRUCTIONS + RISC_INSTRUCTIONS + MIPS_INSTRUCTIONS + SH4_INSTRUCTIONS + CXX_INSTRUCTIONS
 
 INSTRUCTION_SET = INSTRUCTIONS.to_set
 
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/x86.rb webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/x86.rb
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/offlineasm/x86.rb	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/offlineasm/x86.rb	2016-07-24 14:48:55.801364173 -0700
@@ -90,6 +90,25 @@
         true
     when "X86_64_WIN"
         true
+    when "X32"
+        true # X32 is a special mode of X86_64
+    else
+        raise "bad value for $activeBackend: #{$activeBackend}"
+    end
+end
+
+def isX32
+    case $activeBackend
+    when "X86"
+        false
+    when "X86_WIN"
+        false
+    when "X86_64"
+        false
+    when "X86_64_WIN"
+        false
+    when "X32"
+        true
     else
         raise "bad value for $activeBackend: #{$activeBackend}"
     end
@@ -175,7 +194,7 @@
     when :int
         size = "dword"
     when :ptr
-        size =  isX64 ? "qword" : "dword"
+        size =  isX64 && !isX32 ? "qword" : "dword"
     when :double
         size = "qword"
     when :quad
@@ -197,7 +216,7 @@
         when :int
             register(@name + "d")
         when :ptr
-            register(@name)
+            register(isX32 ? @name + "d" : @name)
         when :quad
             register(@name)
         else
@@ -208,6 +227,9 @@
         # Call operands are not allowed to be partial registers.
         "#{callPrefix}#{x86Operand(:quad)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(:quad)}"
+    end
 end
 
 X64_SCRATCH_REGISTER = SpecialRegister.new("r11")
@@ -232,7 +254,7 @@
         when :int
             return register(name + "d")
         when :ptr
-            return register(name)
+            return register(isX32 ? name + "d" : name)
         when :quad
             return register(name)
         end
@@ -247,7 +269,7 @@
     when :int
         register("e" + name16)
     when :ptr
-        register((isX64 ? "r" : "e") + name16)
+        register((isX64 && !isX32 ? "r" : "e") + name16)
     when :quad
         isX64 ? register("r" + name16) : raise
     else
@@ -339,6 +361,9 @@
     def x86CallOperand(kind)
         "#{callPrefix}#{x86Operand(:ptr)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(:ptr)}"
+    end
 end
 
 class FPRegisterID
@@ -382,6 +407,9 @@
     def x86CallOperand(kind)
         "#{callPrefix}#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(kind)}"
+    end
 end
 
 class Immediate
@@ -414,6 +442,9 @@
     def x86CallOperand(kind)
         "#{callPrefix}#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "$#{x86Operand(kind)}"
+    end
 end
 
 class BaseIndex
@@ -440,6 +471,9 @@
     def x86CallOperand(kind)
         "#{callPrefix}#{x86Operand(kind)}"
     end
+    def x86PushOperand(kind)
+        "#{x86Operand(kind)}"
+    end
 end
 
 class AbsoluteAddress
@@ -458,6 +492,9 @@
     def x86CallOperand(kind)
         "#{callPrefix}#{address.value}"
     end
+    def x86PushOperand(kind)
+        "#{address.value}"
+    end
 end
 
 class LabelReference
@@ -517,6 +554,9 @@
     def getModifiedListX86_64_WIN
         getModifiedListX86_64
     end
+    def getModifiedListX32
+        return getModifiedListX86_64
+    end
 end
 
 class Instruction
@@ -546,7 +586,7 @@
         when :int
             "l"
         when :ptr
-            isX64 ? "q" : "l"
+            isX64 && !isX32 ? "q" : "l"
         when :quad
             isX64 ? "q" : raise
         when :double
@@ -565,7 +605,7 @@
         when :int
             4
         when :ptr
-            isX64 ? 8 : 4
+            isX64 && !isX32 ? 8 : 4
         when :quad
             isX64 ? 8 : raise
         when :double
@@ -594,6 +634,19 @@
         handleX86OpWithNumOperands(opcode, kind, operands.size)
     end
     
+    def handleX86Jump(opcode, kind)
+        if isX32
+            if operands[0].is_a? Address or operands[0].is_a? BaseIndex or operands[0].is_a? AbsoluteAddress
+                $asm.puts "mov#{x86Suffix(kind)} #{operands[0].x86Operand(kind)}, #{X64_SCRATCH_REGISTER.x86Operand(kind)}"
+                $asm.puts "#{opcode} #{X64_SCRATCH_REGISTER.x86CallOperand(kind)}"
+            else
+                $asm.puts "#{opcode} #{operands[0].x86CallOperand(kind)}"
+            end
+        else
+            $asm.puts "#{opcode} #{operands[0].x86CallOperand(kind)}"
+        end
+    end
+
     def handleX86Shift(opcode, kind)
         if operands[0].is_a? Immediate or operands[0].x86GPR == "ecx"
             $asm.puts "#{opcode} #{orderOperands(operands[0].x86Operand(:byte), operands[1].x86Operand(kind))}"
@@ -863,6 +916,11 @@
         lowerX86Common
     end
 
+    def lowerX32
+        raise unless $activeBackend == "X32"
+        lowerX86Common
+    end
+
     def lowerX86Common
         $asm.codeOrigin codeOriginString if $enableCodeOriginComments
         $asm.annotation annotation if $enableInstrAnnotations
@@ -1141,12 +1199,12 @@
         when "pop"
             operands.each {
                 | op |
-                $asm.puts "pop #{op.x86Operand(:ptr)}"
+                $asm.puts "pop #{op.x86PushOperand(:ptr)}"
             }
         when "push"
             operands.each {
                 | op |
-                $asm.puts "push #{op.x86Operand(:ptr)}"
+                $asm.puts "push #{op.x86PushOperand(:ptr)}"
             }
         when "move"
             handleMove
@@ -1265,7 +1323,8 @@
         when "btbnz"
             handleX86BranchTest("jnz", :byte)
         when "jmp"
-            $asm.puts "jmp #{operands[0].x86CallOperand(:ptr)}"
+            #$asm.puts "jmp #{operands[0].x86CallOperand(:ptr)}"
+            handleX86Jump("jmp", :ptr)
         when "baddio"
             handleX86OpBranch("add#{x86Suffix(:int)}", "jo", :int)
         when "baddpo"
@@ -1323,11 +1382,12 @@
                     $asm.puts "ffree #{register("st")}(#{offset})"
                 }
             end
-            op = operands[0].x86CallOperand(:ptr)
+            #op = operands[0].x86CallOperand(:ptr)
             if operands[0].is_a? LabelReference
                 operands[0].used
             end
-            $asm.puts "call #{op}"
+            #$asm.puts "call #{op}"
+            handleX86Jump("call", :ptr)
         when "ret"
             $asm.puts "ret"
         when "cieq"
diff -urN webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/SlowPathReturnType.h webkitgtk-2.12.3/Source/JavaScriptCore/runtime/SlowPathReturnType.h
--- webkitgtk-2.12.3.orig/Source/JavaScriptCore/runtime/SlowPathReturnType.h	2016-04-10 23:18:43.000000000 -0700
+++ webkitgtk-2.12.3/Source/JavaScriptCore/runtime/SlowPathReturnType.h	2016-07-24 10:04:36.777465039 -0700
@@ -35,22 +35,22 @@
 // 'extern "C"') needs to be POD; hence putting any constructors into it could cause either compiler
 // warnings, or worse, a change in the ABI used to return these types.
 struct SlowPathReturnType {
-    void* a;
-    void* b;
+    int64_t a;
+    int64_t b;
 };
 
 inline SlowPathReturnType encodeResult(void* a, void* b)
 {
     SlowPathReturnType result;
-    result.a = a;
-    result.b = b;
+    result.a = reinterpret_cast<uintptr_t>(a);
+    result.b = reinterpret_cast<uintptr_t>(b);
     return result;
 }
 
 inline void decodeResult(SlowPathReturnType result, void*& a, void*& b)
 {
-    a = result.a;
-    b = result.b;
+    a = reinterpret_cast<void*>(result.a);
+    b = reinterpret_cast<ExecState*>(result.b);
 }
 
 #else // USE(JSVALUE32_64)
