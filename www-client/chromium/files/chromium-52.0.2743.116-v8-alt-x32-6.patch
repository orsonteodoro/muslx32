diff -urp chromium-53.0.2785.143.orig/gin/converter.h chromium-53.0.2785.143/gin/converter.h
--- chromium-53.0.2785.143.orig/gin/converter.h	2016-09-29 12:02:21.000000000 -0700
+++ chromium-53.0.2785.143/gin/converter.h	2016-10-05 19:06:02.928001129 -0700
@@ -23,8 +23,8 @@ bool SetProperty(v8::Isolate* isolate,
                  KeyType key,
                  v8::Local<v8::Value> value) {
   auto maybe =
-      object->DefineOwnProperty(isolate->GetCurrentContext(), key, value);
-  return !maybe.IsNothing() && maybe.FromJust();
+      object->ForceSet(isolate->GetCurrentContext(), key, value);
+  return !maybe.IsNothing() /*&& maybe.FromJust()*/;
 }
 
 template<typename T>
@@ -163,7 +163,7 @@ struct GIN_EXPORT Converter<v8::Local<v8
 
 template<typename T>
 struct Converter<std::vector<T> > {
-  static v8::MaybeLocal<v8::Value> ToV8(v8::Local<v8::Context> context,
+  static v8::Local<v8::Value> ToV8(v8::Local<v8::Context> context,
                                         const std::vector<T>& val) {
     v8::Isolate* isolate = context->GetIsolate();
     v8::Local<v8::Array> result(
@@ -171,7 +171,7 @@ struct Converter<std::vector<T> > {
     for (uint32_t i = 0; i < val.size(); ++i) {
       auto maybe = result->Set(context, i, Converter<T>::ToV8(isolate, val[i]));
       if (maybe.IsNothing() || !maybe.FromJust())
-        return v8::MaybeLocal<v8::Value>();
+        return v8::Local<v8::Value>();
     }
     return result;
   }
@@ -187,7 +187,7 @@ struct Converter<std::vector<T> > {
     uint32_t length = array->Length();
     for (uint32_t i = 0; i < length; ++i) {
       v8::Local<v8::Value> v8_item;
-      if (!array->Get(isolate->GetCurrentContext(), i).ToLocal(&v8_item))
+      if (!array->Get(i).ToLocal(&v8_item))
         return false;
       T item;
       if (!Converter<T>::FromV8(isolate, v8_item, &item))
@@ -212,7 +212,7 @@ v8::Local<v8::Value> ConvertToV8(v8::Iso
 }
 
 template<typename T>
-v8::MaybeLocal<v8::Value> ConvertToV8(v8::Local<v8::Context> context, T input) {
+v8::Local<v8::Value> ConvertToV8(v8::Local<v8::Context> context, T input) {
   return Converter<T>::ToV8(context, input);
 }
 
