--- chromium-53.0.2785.143/third_party/WebKit/Source/wtf/allocator/PartitionAlloc.cpp.orig	2016-11-16 10:02:49.252289216 -0800
+++ chromium-53.0.2785.143/third_party/WebKit/Source/wtf/allocator/PartitionAlloc.cpp	2016-11-16 10:02:22.244255366 -0800
@@ -305,7 +305,7 @@ bool partitionAllocGenericShutdown(Parti
     return !foundLeak;
 }
 
-#if !CPU(64BIT)
+#if !CPU(64BIT) || defined(__ILP32__)
 static NEVER_INLINE void partitionOutOfMemoryWithLotsOfUncommitedPages()
 {
     IMMEDIATE_CRASH();
@@ -314,7 +314,7 @@ static NEVER_INLINE void partitionOutOfM
 
 static NEVER_INLINE void partitionOutOfMemory(const PartitionRootBase* root)
 {
-#if !CPU(64BIT)
+#if !CPU(64BIT) || defined(__ILP32__)
     // Check whether this OOM is due to a lot of super pages that are allocated
     // but not committed, probably due to http://crbug.com/421387.
     if (root->totalSizeOfSuperPages + root->totalSizeOfDirectMappedPages - root->totalSizeOfCommittedPages > kReasonableSizeOfUnusedPages) {
@@ -666,7 +666,7 @@ static ALWAYS_INLINE PartitionPage* part
     // - We add a trailing guard page on 32-bit (on 64-bit we rely on the
     // massive address space plus randomization instead).
     size_t mapSize = size + kPartitionPageSize;
-#if !CPU(64BIT)
+#if !CPU(64BIT) || defined(__ILP32__)
     mapSize += kSystemPageSize;
 #endif
     // Round up to the allocation granularity.
@@ -685,7 +685,7 @@ static ALWAYS_INLINE PartitionPage* part
 
     char* slot = ptr + kPartitionPageSize;
     setSystemPagesInaccessible(ptr + (kSystemPageSize * 2), kPartitionPageSize - (kSystemPageSize * 2));
-#if !CPU(64BIT)
+#if !CPU(64BIT) || defined(__ILP32__)
     setSystemPagesInaccessible(ptr, kSystemPageSize);
     setSystemPagesInaccessible(slot + size, kSystemPageSize);
 #endif
--- chromium-53.0.2785.143/third_party/WebKit/Source/wtf/ByteSwap.h.orig	2016-11-16 09:58:32.887517406 -0800
+++ chromium-53.0.2785.143/third_party/WebKit/Source/wtf/ByteSwap.h	2016-11-16 09:58:48.231099242 -0800
@@ -58,7 +58,7 @@ ALWAYS_INLINE uint16_t bswap16(uint16_t
 
 #endif
 
-#if CPU(64BIT)
+#if CPU(64BIT) && !defined(__ILP32__)
 
 ALWAYS_INLINE size_t bswapuintptrt(size_t x) { return bswap64(x); }
 
--- chromium-53.0.2785.143/third_party/WebKit/Source/wtf/BitwiseOperations.h.orig	2016-11-16 09:56:00.378734196 -0800
+++ chromium-53.0.2785.143/third_party/WebKit/Source/wtf/BitwiseOperations.h	2016-11-16 09:56:29.193826879 -0800
@@ -86,7 +86,7 @@ ALWAYS_INLINE uint64_t countLeadingZeros
 
 #endif
 
-#if CPU(64BIT)
+#if CPU(64BIT) && !defined(__ILP32__)
 
 ALWAYS_INLINE size_t countLeadingZerosSizet(size_t x) { return countLeadingZeros64(x); }
 
