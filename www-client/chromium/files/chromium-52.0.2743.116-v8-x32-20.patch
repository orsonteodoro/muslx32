diff -pur chromium-52.0.2743.116.orig/v8/src/compiler/x64/instruction-selector-x64.cc chromium-52.0.2743.116/v8/src/compiler/x64/instruction-selector-x64.cc
--- chromium-52.0.2743.116.orig/v8/src/compiler/x64/instruction-selector-x64.cc	2016-08-10 08:22:34.089152734 -0700
+++ chromium-52.0.2743.116/v8/src/compiler/x64/instruction-selector-x64.cc	2016-08-10 16:32:25.891682229 -0700
@@ -2047,7 +2047,7 @@ void InstructionSelector::VisitUint32Les
 
 
 #if V8_TARGET_ARCH_64_BIT
-void InstructionSelector::VisitWord64Equal(Node* const node) { //ot
+void InstructionSelector::VisitWord64Equal(Node* const node) {
   FlagsContinuation cont = FlagsContinuation::ForSet(kEqual, node);
   Int64BinopMatcher m(node);
   if (m.right().Is(0)) {
diff -pur chromium-52.0.2743.116.orig/v8/src/x64/assembler-x64-inl.h chromium-52.0.2743.116/v8/src/x64/assembler-x64-inl.h
--- chromium-52.0.2743.116.orig/v8/src/x64/assembler-x64-inl.h	2016-08-10 08:22:34.090152734 -0700
+++ chromium-52.0.2743.116/v8/src/x64/assembler-x64-inl.h	2016-08-10 16:11:25.463702406 -0700
@@ -614,10 +614,12 @@ void Operand::set_disp64(int64_t disp) {
   len_ += sizeof(disp);
 }
 
+#if V8_TARGET_ARCH_32_BIT
 Operand::Operand(Register reg) {
   // reg
   set_modrm(3, reg);
 }
+#endif
 
 }  // namespace internal
 }  // namespace v8
diff -pur chromium-52.0.2743.116.orig/v8/src/x64/assembler-x64.cc chromium-52.0.2743.116/v8/src/x64/assembler-x64.cc
--- chromium-52.0.2743.116.orig/v8/src/x64/assembler-x64.cc	2016-08-10 08:22:34.091152734 -0700
+++ chromium-52.0.2743.116/v8/src/x64/assembler-x64.cc	2016-08-10 16:10:35.834703201 -0700
@@ -763,7 +763,6 @@ void Assembler::shift(Register dst,
   }
 }
 
-//shr( in x87
 void Assembler::shift(Operand dst, Immediate shift_amount, int subcode,
                       int size) {
   EnsureSpace ensure_space(this);
@@ -789,7 +788,6 @@ void Assembler::shift(Register dst, int
   emit_modrm(subcode, dst);
 }
 
-//shr( in x87
 void Assembler::shift(Operand dst, int subcode, int size) {
   EnsureSpace ensure_space(this);
   emit_rex(dst, size);
diff -pur chromium-52.0.2743.116.orig/v8/src/x64/assembler-x64.h chromium-52.0.2743.116/v8/src/x64/assembler-x64.h
--- chromium-52.0.2743.116.orig/v8/src/x64/assembler-x64.h	2016-08-10 08:22:34.092152734 -0700
+++ chromium-52.0.2743.116/v8/src/x64/assembler-x64.h	2016-08-10 16:10:34.968703214 -0700
@@ -374,8 +374,10 @@ enum ScaleFactor {
 
 class Operand BASE_EMBEDDED {
  public:
+#if V8_TARGET_ARCH_32_BIT
   // reg
   INLINE(explicit Operand(Register reg));
+#endif
 
   // [base + disp/r]
   Operand(Register base, int32_t disp);
@@ -2037,6 +2039,7 @@ class Assembler : public AssemblerBase {
   void RecordRelocInfo(RelocInfo::Mode rmode, intptr_t data = 0);
 
   // Arithmetics
+#if V8_TARGET_ARCH_32_BIT
   void emit_adc(Register dst, Immediate src, int size) {
     immediate_arithmetic_op(0x02, dst, src, size);
   }
@@ -2044,6 +2047,7 @@ class Assembler : public AssemblerBase {
   void emit_adc(Register dst, const Operand& src, int size) {
     arithmetic_op(0x13, dst, src, size);
   }
+#endif
 
   void emit_add(Register dst, Register src, int size) {
     arithmetic_op(0x03, dst, src, size);
@@ -2171,9 +2175,11 @@ class Assembler : public AssemblerBase {
     arithmetic_op(0x1b, dst, src, size);
   }
 
+#if V8_TARGET_ARCH_32_BIT
   void emit_sbb(Register dst, const Operand& src, int size) {
     arithmetic_op(0x1b, dst, src, size);
   }
+#endif
 
   void emit_sub(Register dst, Register src, int size) {
     arithmetic_op(0x2B, dst, src, size);
diff -pur chromium-52.0.2743.116.orig/v8/src/x64/macro-assembler-x64.cc chromium-52.0.2743.116/v8/src/x64/macro-assembler-x64.cc
--- chromium-52.0.2743.116.orig/v8/src/x64/macro-assembler-x64.cc	2016-08-10 08:22:34.094152734 -0700
+++ chromium-52.0.2743.116/v8/src/x64/macro-assembler-x64.cc	2016-08-10 16:23:36.625690702 -0700
@@ -4127,10 +4127,8 @@ void MacroAssembler::ShlPair(Register hi
 }
 
 void MacroAssembler::ShlPair_cl(Register high, Register low) {
-  shld_cl(high, low); //shld
-  shl_cl(low); //shift
-  //shld(high, low);
-  //shift(low, esp, kInt32Size);
+  shld_cl(high, low);
+  shl_cl(low);
   Label done;
   testl(rcx, Immediate(0x20));
   j(equal, &done, Label::kNear);
@@ -4151,10 +4149,8 @@ void MacroAssembler::ShrPair(Register hi
 }
 
 void MacroAssembler::ShrPair_cl(Register high, Register low) {
-  shrd_cl(low, high); //shrd
-  shr_cl(high); //shift
-  //shrd(low, high);
-  //shift(low, rbp, kInt32Size);
+  shrd_cl(low, high);
+  shr_cl(high);
   Label done;
   testl(rcx, Immediate(0x20));
   j(equal, &done, Label::kNear);
diff -pur chromium-52.0.2743.116.orig/v8/src/x64/macro-assembler-x64.h chromium-52.0.2743.116/v8/src/x64/macro-assembler-x64.h
--- chromium-52.0.2743.116.orig/v8/src/x64/macro-assembler-x64.h	2016-08-10 08:22:34.095152734 -0700
+++ chromium-52.0.2743.116/v8/src/x64/macro-assembler-x64.h	2016-08-10 16:24:48.635689549 -0700
@@ -413,12 +413,14 @@ class MacroAssembler: public Assembler {
                       InvokeFlag flag,
                       const CallWrapper& call_wrapper);
 
+#if V8_TARGET_ARCH_32_BIT
   void ShlPair(Register high, Register low, uint8_t imm8);
   void ShlPair_cl(Register high, Register low);
   void ShrPair(Register high, Register low, uint8_t imm8);
   void ShrPair_cl(Register high, Register src);
   void SarPair(Register high, Register low, uint8_t imm8);
   void SarPair_cl(Register high, Register low);
+#endif
 
   // ---------------------------------------------------------------------------
   // Smi tagging, untagging and operations on tagged smis.
