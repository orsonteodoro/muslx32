Updated from muslx32 overlay
----
--- base/trace_event/malloc_dump_provider.cc.orig	2018-05-10 15:06:23.000000000 -0700
+++ base/trace_event/malloc_dump_provider.cc	2018-05-27 19:33:53.890799071 -0700
@@ -252,7 +252,7 @@ bool MallocDumpProvider::OnMemoryDump(co
   }
 #elif defined(OS_FUCHSIA)
 // TODO(fuchsia): Port, see https://crbug.com/706592.
-#else
+#elif defined(OS_LINUX) && defined(__GLIBC__)
   struct mallinfo info = mallinfo();
   DCHECK_GE(info.arena + info.hblkhd, info.uordblks);
 
@@ -266,6 +266,7 @@ bool MallocDumpProvider::OnMemoryDump(co
   allocated_objects_size = info.uordblks;
 #endif
 
+#if defined(USE_TCMALLOC) || defined(OS_MACOSX) || defined(OS_IOS) || (defined(OS_LINUX) && defined(__GLIBC__))
   MemoryAllocatorDump* outer_dump = pmd->CreateAllocatorDump("malloc");
   outer_dump->AddScalar("virtual_size", MemoryAllocatorDump::kUnitsBytes,
                         total_virtual_size);
@@ -292,6 +293,7 @@ bool MallocDumpProvider::OnMemoryDump(co
                           MemoryAllocatorDump::kUnitsBytes,
                           resident_size - allocated_objects_size);
   }
+#endif
 
   // Heap profiler dumps.
   if (!allocation_register_.is_enabled())
--- content/child/content_child_helpers.cc.orig	2018-05-10 15:06:41.000000000 -0700
+++ content/child/content_child_helpers.cc	2018-05-27 19:32:28.802798185 -0700
@@ -13,7 +13,7 @@
 #include "build/build_config.h"
 #include "v8/include/v8.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) && defined(__GLIBC__)
 #include <malloc.h>
 #endif
 
@@ -25,7 +25,7 @@ namespace content {
 // though, this provides only a partial and misleading value.
 // Unfortunately some telemetry benchmark rely on it and these need to
 // be refactored before getting rid of this. See crbug.com/581365 .
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if (defined(OS_LINUX) && defined(__GLIBC__)) || defined(OS_ANDROID)
 size_t GetMemoryUsageKB() {
   struct mallinfo minfo = mallinfo();
   uint64_t mem_usage =
