Updated from muslx32 overlay
----
--- base/allocator/allocator_shim.cc.orig	2018-05-10 15:06:22.000000000 -0700
+++ base/allocator/allocator_shim.cc	2018-05-27 19:50:52.137809665 -0700
@@ -285,20 +285,6 @@ ALWAYS_INLINE void ShimFreeDefiniteSize(
 #include "base/allocator/allocator_shim_override_cpp_symbols.h"
 #endif
 
-#if defined(OS_ANDROID)
-// Android does not support symbol interposition. The way malloc symbols are
-// intercepted on Android is by using link-time -wrap flags.
-#include "base/allocator/allocator_shim_override_linker_wrapped_symbols.h"
-#elif defined(OS_WIN)
-// On Windows we use plain link-time overriding of the CRT symbols.
-#include "base/allocator/allocator_shim_override_ucrt_symbols_win.h"
-#elif defined(OS_MACOSX)
-#include "base/allocator/allocator_shim_default_dispatch_to_mac_zoned_malloc.h"
-#include "base/allocator/allocator_shim_override_mac_symbols.h"
-#else
-#include "base/allocator/allocator_shim_override_libc_symbols.h"
-#endif
-
 // In the case of tcmalloc we also want to plumb into the glibc hooks
 // to avoid that allocations made in glibc itself (e.g., strdup()) get
 // accidentally performed on the glibc heap instead of the tcmalloc one.
--- base/allocator/allocator_shim_default_dispatch_to_glibc.cc.orig	2018-05-27 19:50:24.206809374 -0700
+++ base/allocator/allocator_shim_default_dispatch_to_glibc.cc	2018-05-27 19:52:27.305810655 -0700
@@ -10,45 +10,39 @@
 // routes allocations to libc functions.
 // The code here is strongly inspired from tcmalloc's libc_override_glibc.h.
 
-extern "C" {
-void* __libc_malloc(size_t size);
-void* __libc_calloc(size_t n, size_t size);
-void* __libc_realloc(void* address, size_t size);
-void* __libc_memalign(size_t alignment, size_t size);
-void __libc_free(void* ptr);
-}  // extern "C"
+#include <stdlib.h>
 
 namespace {
 
 using base::allocator::AllocatorDispatch;
 
 void* GlibcMalloc(const AllocatorDispatch*, size_t size, void* context) {
-  return __libc_malloc(size);
+  return malloc(size);
 }
 
 void* GlibcCalloc(const AllocatorDispatch*,
                   size_t n,
                   size_t size,
                   void* context) {
-  return __libc_calloc(n, size);
+  return calloc(n, size);
 }
 
 void* GlibcRealloc(const AllocatorDispatch*,
                    void* address,
                    size_t size,
                    void* context) {
-  return __libc_realloc(address, size);
+  return realloc(address, size);
 }
 
 void* GlibcMemalign(const AllocatorDispatch*,
                     size_t alignment,
                     size_t size,
                     void* context) {
-  return __libc_memalign(alignment, size);
+  return memalign(alignment, size);
 }
 
 void GlibcFree(const AllocatorDispatch*, void* address, void* context) {
-  __libc_free(address);
+  free(address);
 }
 
 size_t GlibcGetSizeEstimate(const AllocatorDispatch*,
--- base/allocator/allocator_shim_internals.h.orig	2018-05-10 15:06:22.000000000 -0700
+++ base/allocator/allocator_shim_internals.h	2018-05-27 19:50:24.235809374 -0700
@@ -7,8 +7,6 @@
 
 #if defined(__GNUC__)
 
-#include <sys/cdefs.h>  // for __THROW
-
 #ifndef __THROW  // Not a glibc system
 #ifdef _NOEXCEPT  // LLVM libc++ uses noexcept instead
 #define __THROW _NOEXCEPT
