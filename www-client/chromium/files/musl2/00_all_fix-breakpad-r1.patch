Updated from muslx32 overlay
----
diff -urp third_party/breakpad.orig/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h
--- third_party/breakpad.orig/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h	2018-05-10 15:08:56.000000000 -0700
+++ third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h	2018-05-27 16:12:37.912673429 -0700
@@ -37,6 +37,10 @@
 #include "common/memory_allocator.h"
 #include "google_breakpad/common/minidump_format.h"
 
+#ifndef __GLIBC__
+#define _libc_fpstate _fpstate
+#endif
+
 namespace google_breakpad {
 
 // Wraps platform-dependent implementations of accessors to ucontext_t structs.
Only in third_party/breakpad/breakpad/src/client/linux/dump_writer_common: ucontext_reader.h.orig
diff -urp third_party/breakpad.orig/breakpad/src/client/linux/handler/exception_handler.cc third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
--- third_party/breakpad.orig/breakpad/src/client/linux/handler/exception_handler.cc	2018-05-10 15:08:56.000000000 -0700
+++ third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc	2018-05-27 16:14:19.640674488 -0700
@@ -489,8 +489,10 @@ bool ExceptionHandler::SimulateSignalDel
   // ExceptionHandler::HandleSignal().
   siginfo.si_code = SI_USER;
   siginfo.si_pid = getpid();
-  ucontext_t context;
+  ucontext_t context = {0};
+#if defined(__GLIBC__)
   getcontext(&context);
+#endif
   return HandleSignal(sig, &siginfo, &context);
 }
 
@@ -675,9 +677,11 @@ bool ExceptionHandler::WriteMinidump() {
   sys_prctl(PR_SET_DUMPABLE, 1, 0, 0, 0);
 
   CrashContext context;
+#if defined(__GLIBC__)
   int getcontext_result = getcontext(&context.context);
   if (getcontext_result)
     return false;
+#endif
 
 #if defined(__i386__)
   // In CPUFillFromUContext in minidumpwriter.cc the stack pointer is retrieved
Only in third_party/breakpad/breakpad/src/client/linux/handler: exception_handler.cc.orig
Only in third_party/breakpad/breakpad/src/client/linux/handler: exception_handler.cc.rej
diff -urp third_party/breakpad.orig/breakpad/src/client/linux/minidump_writer/minidump_writer.h third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.h
--- third_party/breakpad.orig/breakpad/src/client/linux/minidump_writer/minidump_writer.h	2018-05-10 15:08:56.000000000 -0700
+++ third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.h	2018-05-27 16:12:49.847673553 -0700
@@ -41,6 +41,10 @@
 #include "client/linux/minidump_writer/linux_dumper.h"
 #include "google_breakpad/common/minidump_format.h"
 
+#ifndef __GLIBC__
+#define _libc_fpstate _fpstate
+#endif
+
 namespace google_breakpad {
 
 class ExceptionHandler;
diff -urp third_party/breakpad.orig/breakpad/src/client/linux/minidump_writer/minidump_writer_unittest.cc third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer_unittest.cc
--- third_party/breakpad.orig/breakpad/src/client/linux/minidump_writer/minidump_writer_unittest.cc	2018-05-10 15:08:56.000000000 -0700
+++ third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer_unittest.cc	2018-05-27 16:12:54.855673606 -0700
@@ -123,6 +123,7 @@ TEST(MinidumpWriterTest, SetupWithFD) {
 
 // Test that mapping info can be specified when writing a minidump,
 // and that it ends up in the module list of the minidump.
+#if defined(__GLIBC__)
 TEST(MinidumpWriterTest, MappingInfo) {
   int fds[2];
   ASSERT_NE(-1, pipe(fds));
@@ -217,6 +218,7 @@ TEST(MinidumpWriterTest, MappingInfo) {
   close(fds[1]);
   IGNORE_EINTR(waitpid(child, nullptr, 0));
 }
+#endif // defined(__GLIBC__)
 
 // Test that minidumping is skipped while writing minidumps if principal mapping
 // is not referenced.
@@ -599,6 +601,7 @@ TEST(MinidumpWriterTest, DeletedBinary)
 }
 
 // Test that an additional memory region can be added to the minidump.
+#if defined(__GLIBC__)
 TEST(MinidumpWriterTest, AdditionalMemory) {
   int fds[2];
   ASSERT_NE(-1, pipe(fds));
@@ -750,6 +753,7 @@ TEST(MinidumpWriterTest, InvalidStackPoi
   close(fds[1]);
   IGNORE_EINTR(waitpid(child, nullptr, 0));
 }
+#endif // defined(__GLIBC__)
 
 // Test that limiting the size of the minidump works.
 TEST(MinidumpWriterTest, MinidumpSizeLimit) {
Only in third_party/breakpad/breakpad/src/client/linux/minidump_writer: minidump_writer_unittest.cc.orig
diff -urp third_party/breakpad.orig/breakpad/src/common/linux/elf_core_dump.h third_party/breakpad/breakpad/src/common/linux/elf_core_dump.h
--- third_party/breakpad.orig/breakpad/src/common/linux/elf_core_dump.h	2018-05-10 15:08:56.000000000 -0700
+++ third_party/breakpad/breakpad/src/common/linux/elf_core_dump.h	2018-05-27 16:13:00.085673660 -0700
@@ -36,6 +36,7 @@
 #include <elf.h>
 #include <link.h>
 #include <stddef.h>
+#include <sys/reg.h>
 
 #include "common/memory_range.h"
 
