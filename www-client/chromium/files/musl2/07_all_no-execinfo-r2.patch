Updated from muslx32 overlay
----
diff -urp ./base/debug.orig/leak_tracker.h ./base/debug/leak_tracker.h
--- ./base/debug.orig/leak_tracker.h	2018-05-10 15:06:22.000000000 -0700
+++ ./base/debug/leak_tracker.h	2018-05-27 19:00:23.060778149 -0700
@@ -10,7 +10,7 @@
 #include "build/build_config.h"
 
 // Only enable leak tracking in non-uClibc debug builds.
-#if !defined(NDEBUG) && !defined(__UCLIBC__)
+#if !defined(NDEBUG) && defined(HAVE_BACKTRACE)
 #define ENABLE_LEAK_TRACKER
 #endif
 
diff -urp ./base/debug.orig/stack_trace.cc ./base/debug/stack_trace.cc
--- ./base/debug.orig/stack_trace.cc	2018-05-10 15:06:22.000000000 -0700
+++ ./base/debug/stack_trace.cc	2018-05-27 19:13:25.935786295 -0700
@@ -214,7 +214,7 @@ const void *const *StackTrace::Addresses
 
 std::string StackTrace::ToString() const {
   std::stringstream stream;
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
   OutputToStream(&stream);
 #endif
   return stream.str();
Only in ./base/debug: stack_trace.cc.orig
Only in ./base/debug: stack_trace.cc.rej
diff -urp ./base/debug.orig/stack_trace.h ./base/debug/stack_trace.h
--- ./base/debug.orig/stack_trace.h	2018-05-10 15:06:22.000000000 -0700
+++ ./base/debug/stack_trace.h	2018-05-27 19:12:59.939786024 -0700
@@ -83,7 +83,7 @@ class BASE_EXPORT StackTrace {
   // Prints the stack trace to stderr.
   void Print() const;
 
-#if !defined(__UCLIBC__) & !defined(_AIX)
+#if defined(HAVE_BACKTRACE) & !defined(_AIX)
   // Resolves backtrace to symbols and write to stream.
   void OutputToStream(std::ostream* os) const;
 #endif
Only in ./base/debug: stack_trace.h.orig
Only in ./base/debug: stack_trace.h.rej
diff -urp ./base/debug.orig/stack_trace_posix.cc ./base/debug/stack_trace_posix.cc
--- ./base/debug.orig/stack_trace_posix.cc	2018-05-10 15:06:22.000000000 -0700
+++ ./base/debug/stack_trace_posix.cc	2018-05-27 19:11:56.063785360 -0700
@@ -27,7 +27,7 @@
 #if !defined(USE_SYMBOLIZE)
 #include <cxxabi.h>
 #endif
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
 #include <execinfo.h>
 #endif
 
@@ -85,7 +85,7 @@ void DemangleSymbols(std::string* text)
   // Note: code in this function is NOT async-signal safe (std::string uses
   // malloc internally).
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
   std::string::size_type search_from = 0;
   while (search_from < text->size()) {
     // Look for the start of a mangled symbol, from search_from.
@@ -120,7 +120,7 @@ void DemangleSymbols(std::string* text)
       search_from = mangled_start + 2;
     }
   }
-#endif  // !defined(__UCLIBC__) && !defined(_AIX)
+#endif  // defined(HAVE_BACKTRACE) && !defined(_AIX)
 }
 #endif  // !defined(USE_SYMBOLIZE)
 
@@ -132,7 +132,7 @@ class BacktraceOutputHandler {
   virtual ~BacktraceOutputHandler() = default;
 };
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
 void OutputPointer(void* pointer, BacktraceOutputHandler* handler) {
   // This should be more than enough to store a 64-bit number in hex:
   // 16 hex digits + 1 for null-terminator.
@@ -209,7 +209,7 @@ void ProcessBacktrace(void *const *trace
   }
 #endif  // defined(USE_SYMBOLIZE)
 }
-#endif  // !defined(__UCLIBC__) && !defined(_AIX)
+#endif  // defined(HAVE_BACKTRACE) && !defined(_AIX)
 
 void PrintToStderr(const char* output) {
   // NOTE: This code MUST be async-signal safe (it's used by in-process
@@ -800,7 +800,7 @@ StackTrace::StackTrace(size_t count) {
 // NOTE: This code MUST be async-signal safe (it's used by in-process
 // stack dumping signal handler). NO malloc or stdio is allowed here.
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
   count = std::min(arraysize(trace_), count);
 
   // Though the backtrace API man page does not list any possible negative
@@ -815,13 +815,13 @@ void StackTrace::Print() const {
   // NOTE: This code MUST be async-signal safe (it's used by in-process
   // stack dumping signal handler). NO malloc or stdio is allowed here.
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
   PrintBacktraceOutputHandler handler;
   ProcessBacktrace(trace_, count_, &handler);
 #endif
 }
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
 void StackTrace::OutputToStream(std::ostream* os) const {
   StreamBacktraceOutputHandler handler(os);
   ProcessBacktrace(trace_, count_, &handler);
Only in ./base/debug: stack_trace_posix.cc.orig
Only in ./base/debug: stack_trace_posix.cc.rej
diff -urp ./base/debug.orig/stack_trace_unittest.cc ./base/debug/stack_trace_unittest.cc
--- ./base/debug.orig/stack_trace_unittest.cc	2018-05-10 15:06:22.000000000 -0700
+++ ./base/debug/stack_trace_unittest.cc	2018-05-27 19:09:49.683784045 -0700
@@ -39,7 +39,7 @@ typedef testing::Test StackTraceTest;
 #else
 #define MAYBE_OutputToStream OutputToStream
 #endif
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(HAVE_BACKTRACE) && !defined(_AIX)
 TEST_F(StackTraceTest, MAYBE_OutputToStream) {
   StackTrace trace;
 
@@ -151,7 +151,7 @@ TEST_F(StackTraceTest, DebugOutputToStre
 TEST_F(StackTraceTest, DebugPrintBacktrace) {
   StackTrace().Print();
 }
-#endif  // !defined(__UCLIBC__)
+#endif  // defined(HAVE_BACKTRACE)
 
 #if defined(OS_POSIX) && !defined(OS_ANDROID) && !defined(OS_FUCHSIA)
 #if !defined(OS_IOS)
Only in ./base/debug: stack_trace_unittest.cc.orig
Only in ./base/debug: stack_trace_unittest.cc.rej
--- ./third_party/WebKit/Source/platform/wtf/Assertions.cpp.orig	2018-05-27 19:00:28.112778202 -0700
+++ ./third_party/WebKit/Source/platform/wtf/Assertions.cpp	2018-05-27 19:15:31.210787598 -0700
@@ -49,7 +49,7 @@
 #include <windows.h>
 #endif
 
-#if defined(OS_MACOSX) || (defined(OS_LINUX) && !defined(__UCLIBC__))
+#if defined(OS_MACOSX) || (defined(OS_LINUX) && defined(HAVE_BACKTRACE))
 #include <cxxabi.h>
 #include <dlfcn.h>
 #include <execinfo.h>
