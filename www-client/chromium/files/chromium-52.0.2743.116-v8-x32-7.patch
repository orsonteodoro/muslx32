diff -ur chromium-52.0.2743.116.orig/v8/src/compiler/x64/instruction-selector-x64.cc chromium-52.0.2743.116/v8/src/compiler/x64/instruction-selector-x64.cc
--- chromium-52.0.2743.116.orig/v8/src/compiler/x64/instruction-selector-x64.cc	2016-08-04 20:24:05.848758276 -0700
+++ chromium-52.0.2743.116/v8/src/compiler/x64/instruction-selector-x64.cc	2016-08-04 21:05:02.040718957 -0700
@@ -463,6 +463,7 @@
 void InstructionSelector::VisitWord64And(Node* node) {
   VisitBinop(this, node, kX64And);
 }
+#endif
 
 
 void InstructionSelector::VisitWord32Or(Node* node) {
@@ -470,9 +471,11 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Or(Node* node) {
   VisitBinop(this, node, kX64Or);
 }
+#endif
 
 
 void InstructionSelector::VisitWord32Xor(Node* node) {
@@ -485,7 +488,7 @@
   }
 }
 
-
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Xor(Node* node) {
   X64OperandGenerator g(this);
   Uint64BinopMatcher m(node);
@@ -495,6 +498,7 @@
     VisitBinop(this, node, kX64Xor);
   }
 }
+#endif
 
 
 namespace {
@@ -578,7 +582,7 @@
   VisitWord32Shift(this, node, kX64Shl32);
 }
 
-
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Shl(Node* node) {
   X64OperandGenerator g(this);
   Int64BinopMatcher m(node);
@@ -593,6 +597,7 @@
   }
   VisitWord64Shift(this, node, kX64Shl);
 }
+#endif
 
 
 void InstructionSelector::VisitWord32Shr(Node* node) {
@@ -600,9 +605,11 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Shr(Node* node) {
   VisitWord64Shift(this, node, kX64Shr);
 }
+#endif
 
 
 void InstructionSelector::VisitWord32Sar(Node* node) {
@@ -622,6 +629,7 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Sar(Node* node) {
   X64OperandGenerator g(this);
   Int64BinopMatcher m(node);
@@ -694,6 +702,7 @@
   }
   VisitWord64Shift(this, node, kX64Sar);
 }
+#endif
 
 
 void InstructionSelector::VisitWord32Ror(Node* node) {
@@ -701,15 +710,19 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Ror(Node* node) {
   VisitWord64Shift(this, node, kX64Ror);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Clz(Node* node) {
   X64OperandGenerator g(this);
   Emit(kX64Lzcnt, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
+#endif
 
 
 void InstructionSelector::VisitWord32Clz(Node* node) {
@@ -718,10 +731,12 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Ctz(Node* node) {
   X64OperandGenerator g(this);
   Emit(kX64Tzcnt, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
+#endif
 
 
 void InstructionSelector::VisitWord32Ctz(Node* node) {
@@ -733,7 +748,9 @@
 void InstructionSelector::VisitWord32ReverseBits(Node* node) { UNREACHABLE(); }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64ReverseBits(Node* node) { UNREACHABLE(); }
+#endif
 
 
 void InstructionSelector::VisitWord32Popcnt(Node* node) {
@@ -742,10 +759,12 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitWord64Popcnt(Node* node) {
   X64OperandGenerator g(this);
   Emit(kX64Popcnt, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
+#endif
 
 void InstructionSelector::VisitInt32Add(Node* node) {
   X64OperandGenerator g(this);
@@ -764,11 +783,14 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64Add(Node* node) {
   VisitBinop(this, node, kX64Add);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64AddWithOverflow(Node* node) {
   if (Node* ovf = NodeProperties::FindProjection(node, 1)) {
     FlagsContinuation cont = FlagsContinuation::ForSet(kOverflow, ovf);
@@ -777,6 +799,7 @@
   FlagsContinuation cont;
   VisitBinop(this, node, kX64Add, &cont);
 }
+#endif
 
 
 void InstructionSelector::VisitInt32Sub(Node* node) {
@@ -798,6 +821,7 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64Sub(Node* node) {
   X64OperandGenerator g(this);
   Int64BinopMatcher m(node);
@@ -807,8 +831,10 @@
     VisitBinop(this, node, kX64Sub);
   }
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64SubWithOverflow(Node* node) {
   if (Node* ovf = NodeProperties::FindProjection(node, 1)) {
     FlagsContinuation cont = FlagsContinuation::ForSet(kOverflow, ovf);
@@ -817,6 +843,7 @@
   FlagsContinuation cont;
   VisitBinop(this, node, kX64Sub, &cont);
 }
+#endif
 
 
 namespace {
@@ -887,9 +914,11 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64Mul(Node* node) {
   VisitMul(this, node, kX64Imul);
 }
+#endif
 
 
 void InstructionSelector::VisitInt32MulHigh(Node* node) {
@@ -902,9 +931,11 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64Div(Node* node) {
   VisitDiv(this, node, kX64Idiv);
 }
+#endif
 
 
 void InstructionSelector::VisitUint32Div(Node* node) {
@@ -912,9 +943,11 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitUint64Div(Node* node) {
   VisitDiv(this, node, kX64Udiv);
 }
+#endif
 
 
 void InstructionSelector::VisitInt32Mod(Node* node) {
@@ -922,9 +955,11 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64Mod(Node* node) {
   VisitMod(this, node, kX64Idiv);
 }
+#endif
 
 
 void InstructionSelector::VisitUint32Mod(Node* node) {
@@ -932,9 +967,11 @@
 }
 
 
-void InstructionSelector::VisitUint64Mod(Node* node) {
+#if V8_TARGET_ARCH_64_BIT
+void InstructionSelector::VisitUint64Mod(Node* node) { //
   VisitMod(this, node, kX64Udiv);
 }
+#endif
 
 
 void InstructionSelector::VisitUint32MulHigh(Node* node) {
@@ -990,6 +1027,7 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitTryTruncateFloat32ToInt64(Node* node) {
   X64OperandGenerator g(this);
   InstructionOperand inputs[] = {g.UseRegister(node->InputAt(0))};
@@ -1004,8 +1042,10 @@
 
   Emit(kSSEFloat32ToInt64, output_count, outputs, 1, inputs);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitTryTruncateFloat64ToInt64(Node* node) {
   X64OperandGenerator g(this);
   InstructionOperand inputs[] = {g.UseRegister(node->InputAt(0))};
@@ -1020,8 +1060,10 @@
 
   Emit(kSSEFloat64ToInt64, output_count, outputs, 1, inputs);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitTryTruncateFloat32ToUint64(Node* node) {
   X64OperandGenerator g(this);
   InstructionOperand inputs[] = {g.UseRegister(node->InputAt(0))};
@@ -1036,8 +1078,10 @@
 
   Emit(kSSEFloat32ToUint64, output_count, outputs, 1, inputs);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitTryTruncateFloat64ToUint64(Node* node) {
   X64OperandGenerator g(this);
   InstructionOperand inputs[] = {g.UseRegister(node->InputAt(0))};
@@ -1052,14 +1096,18 @@
 
   Emit(kSSEFloat64ToUint64, output_count, outputs, 1, inputs);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitChangeInt32ToInt64(Node* node) {
   X64OperandGenerator g(this);
   Emit(kX64Movsxlq, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitChangeUint32ToUint64(Node* node) {
   X64OperandGenerator g(this);
   Node* value = node->InputAt(0);
@@ -1095,6 +1143,7 @@
   }
   Emit(kX64Movl, g.DefineAsRegister(node), g.Use(value));
 }
+#endif
 
 
 namespace {
@@ -1149,6 +1198,7 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitTruncateInt64ToInt32(Node* node) {
   X64OperandGenerator g(this);
   Node* value = node->InputAt(0);
@@ -1170,6 +1220,7 @@
   }
   Emit(kX64Movl, g.DefineAsRegister(node), g.Use(value));
 }
+#endif
 
 void InstructionSelector::VisitRoundFloat64ToInt32(Node* node) {
   VisitRO(this, node, kSSEFloat64ToInt32);
@@ -1181,16 +1232,20 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitRoundInt64ToFloat32(Node* node) {
   X64OperandGenerator g(this);
   Emit(kSSEInt64ToFloat32, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitRoundInt64ToFloat64(Node* node) {
   X64OperandGenerator g(this);
   Emit(kSSEInt64ToFloat64, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
+#endif
 
 
 void InstructionSelector::VisitRoundUint32ToFloat32(Node* node) {
@@ -1199,20 +1254,24 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitRoundUint64ToFloat32(Node* node) {
   X64OperandGenerator g(this);
   InstructionOperand temps[] = {g.TempRegister()};
   Emit(kSSEUint64ToFloat32, g.DefineAsRegister(node), g.Use(node->InputAt(0)),
        arraysize(temps), temps);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitRoundUint64ToFloat64(Node* node) {
   X64OperandGenerator g(this);
   InstructionOperand temps[] = {g.TempRegister()};
   Emit(kSSEUint64ToFloat64, g.DefineAsRegister(node), g.Use(node->InputAt(0)),
        arraysize(temps), temps);
 }
+#endif
 
 
 void InstructionSelector::VisitBitcastFloat32ToInt32(Node* node) {
@@ -1221,10 +1280,12 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitBitcastFloat64ToInt64(Node* node) {
   X64OperandGenerator g(this);
   Emit(kX64BitcastDL, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
+#endif
 
 
 void InstructionSelector::VisitBitcastInt32ToFloat32(Node* node) {
@@ -1233,11 +1294,11 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitBitcastInt64ToFloat64(Node* node) {
   X64OperandGenerator g(this);
   Emit(kX64BitcastLD, g.DefineAsRegister(node), g.Use(node->InputAt(0)));
 }
-
 #endif //V8_TARGET_ARCH_64_BIT
 
 #if V8_TARGET_ARCH_32_BIT
@@ -1963,7 +2024,8 @@
 }
 
 
-void InstructionSelector::VisitWord64Equal(Node* const node) {
+#if V8_TARGET_ARCH_64_BIT
+void InstructionSelector::VisitWord64Equal(Node* const node) { //ot
   FlagsContinuation cont = FlagsContinuation::ForSet(kEqual, node);
   Int64BinopMatcher m(node);
   if (m.right().Is(0)) {
@@ -1983,6 +2045,7 @@
   }
   VisitWord64Compare(this, node, &cont);
 }
+#endif
 
 
 void InstructionSelector::VisitInt32AddWithOverflow(Node* node) {
@@ -2005,30 +2068,38 @@
 }
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64LessThan(Node* node) {
   FlagsContinuation cont = FlagsContinuation::ForSet(kSignedLessThan, node);
   VisitWord64Compare(this, node, &cont);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitInt64LessThanOrEqual(Node* node) {
   FlagsContinuation cont =
       FlagsContinuation::ForSet(kSignedLessThanOrEqual, node);
   VisitWord64Compare(this, node, &cont);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitUint64LessThan(Node* node) {
   FlagsContinuation cont = FlagsContinuation::ForSet(kUnsignedLessThan, node);
   VisitWord64Compare(this, node, &cont);
 }
+#endif
 
 
+#if V8_TARGET_ARCH_64_BIT
 void InstructionSelector::VisitUint64LessThanOrEqual(Node* node) {
   FlagsContinuation cont =
       FlagsContinuation::ForSet(kUnsignedLessThanOrEqual, node);
   VisitWord64Compare(this, node, &cont);
 }
+#endif
 
 
 void InstructionSelector::VisitFloat32Equal(Node* node) {
