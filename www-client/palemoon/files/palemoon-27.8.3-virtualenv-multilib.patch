See: https://github.com/pypa/virtualenv/pull/1041
diff -urp python/virtualenv.orig/virtualenv.py python/virtualenv/virtualenv.py
--- a/python/virtualenv.orig/virtualenv.py	2018-05-01 17:32:08.357518428 -0700
+++ b/python/virtualenv/virtualenv.py	2018-05-01 17:57:06.666534017 -0700
@@ -1157,7 +1157,10 @@ def install_python(home_dir, lib_dir, in
     else:
         prefix = sys.prefix
     mkdir(lib_dir)
-    fix_lib64(lib_dir, symlink)
+
+    # Account for explicit /usr/lib*
+    is_libarch_explicit, libarch = fix_libarch(lib_dir, symlink)
+
     stdlib_dirs = [os.path.dirname(os.__file__)]
     if is_win:
         stdlib_dirs.append(join(os.path.dirname(stdlib_dirs[0]), 'DLLs'))
@@ -1192,6 +1195,14 @@ def install_python(home_dir, lib_dir, in
     site_dir = os.path.dirname(site_filename_dst)
     writefile(site_filename_dst, SITE_PY)
     writefile(join(site_dir, 'orig-prefix.txt'), prefix)
+
+    # We need to record the suffix of original libdir, or the virtualenv
+    # site.py will not be able to insert the correct system package paths.
+    # Assuming that the simplicity of orig-prefix.txt may be relied upon by
+    # external programs, we have to write a new file here.
+    if is_libarch_explicit:
+        writefile(join(site_dir, 'libarch.txt'), libarch)
+
     site_packages_filename = join(site_dir, 'no-global-site-packages.txt')
     if not site_packages:
         writefile(site_packages_filename, '')
@@ -1549,36 +1560,52 @@ def fix_local_scheme(home_dir, symlink=T
                     copyfile(os.path.abspath(os.path.join(home_dir, subdir_name)), \
                                                             os.path.join(local_path, subdir_name), symlink)
 
-def fix_lib64(lib_dir, symlink=True):
+def fix_libarch(lib_dir, symlink=True):
     """
-    Some platforms (particularly Gentoo on x64) put things in lib64/pythonX.Y
+    Some platforms (particularly Gentoo on x64 and MIPS) put things in libarch/pythonX.Y
     instead of lib/pythonX.Y.  If this is such a platform we'll just create a
-    symlink so lib64 points to lib
+    symlink so libarch points to lib
     """
+
+    for arch in '64', '32', 'x32':
+       if _do_fix_libarch(lib_dir, symlink, arch):
+            return True, arch
+    return False, None
+
+
+
+def _do_fix_libarch(lib_dir, symlink, arch):
+    # Check we have an arch-specific library path
+    target_dirname = 'lib' + arch
+    logger.debug("Trying to symlink libdir '%s' to lib" % (target_dirname, ))
+
     if [p for p in distutils.sysconfig.get_config_vars().values()
-        if isinstance(p, basestring) and 'lib64' in p]:
+        if isinstance(p, basestring) and target_dirname in p]:
         # PyPy's library path scheme is not affected by this.
         # Return early or we will die on the following assert.
         if is_pypy:
-            logger.debug('PyPy detected, skipping lib64 symlinking')
-            return
+            logger.debug('PyPy detected, skipping %s symlinking' % (target_dirname, ))
+            return True
 
-        logger.debug('This system uses lib64; symlinking lib64 to lib')
+        logger.debug('This system uses %s; symlinking %s to lib' % (
+            target_dirname,
+            target_dirname,
+        ))
 
         assert os.path.basename(lib_dir) == 'python%s' % sys.version[:3], (
             "Unexpected python lib dir: %r" % lib_dir)
         lib_parent = os.path.dirname(lib_dir)
         top_level = os.path.dirname(lib_parent)
         lib_dir = os.path.join(top_level, 'lib')
-        lib64_link = os.path.join(top_level, 'lib64')
+        target_lib_link = os.path.join(top_level, target_dirname)
         assert os.path.basename(lib_parent) == 'lib', (
             "Unexpected parent dir: %r" % lib_parent)
-        if os.path.lexists(lib64_link):
-            return
+        if os.path.lexists(target_lib_link):
+            return True
         if symlink:
-            os.symlink('lib', lib64_link)
+            os.symlink('lib', target_lib_link)
         else:
-            copyfile('lib', lib64_link)
+            copyfile('lib', target_lib_link)
 
 def resolve_interpreter(exe):
     """
@@ -1858,147 +1885,148 @@ def convert(s):
 
 ##file site.py
 SITE_PY = convert("""
-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
-AVijEPwfucjncQ==
+eJzFPf1z2zaWv/OvwMqToZTKdOLs7u05dW+cxGm95ybeJp3NrevRUhJksaZIliBta2/u/vZ7HwAI
+8EO2t905TSeWSODh4eHhfeE9dDQanRSFzJZiky/rVAol43KxFkVcrZVY5aWo1km53C/istrC08VN
+fC2VqHKhtirCVlEQPP+Vn+C5+LxOlEEBvsV1lW/iKlnEaboVyabIy0ouxbIuk+xaJFlSJXGa/ANa
+5Fkknv96DIKzTMDM00SW4laWCuAqka/ExbZa55kY1wXO+WX0h/jVZCrUokyKChqUGmegyDqugkzK
+JaAJLWsFpEwqua8KuUhWycI2vMvrdCmKNF5I8fe/89SoaRgGKt/Iu7UspcgAGYApAVaBeMDXpBSL
+fCkjId7IRYwD8POGWAFDm+KaKSRjlos0z65hTplcSKXicivG87oiQISyWOaAUwIYVEmaBnd5eaMm
+sKS0HnfwSMTMHv5kmD1gnjh+l3MAx49Z8GOW3E8ZNnAPgqvWzDalXCX3Ikaw8FPey8VMPxsnK7FM
+ViugQVZNsEnACCiRJvODgpbja71C3xwQVpYrYxhDIsrcmF9Sjyg4q0ScKmDbukAaKcL8nZwncQbU
+yG5hOIAIJA36xlkmqrLj0OxEDgBKXMcKdslGifEmTjJg1u/jBaH91yRb5ndqQhSA1VLi51pV7vzH
+PQSA1g4BpgEullnNOkuTG5luJ4DAZ8C+lKpOK9wQy6SUiyovE6kIAKC2FfIekJ6KuJSahMyZZt9O
+if5EkyTDhcUNhhseXyJJVsl1XdIOE6sEOBe44v3HH8S70zdnJx80jxlgvGevN4AzQKGFdnCCAcRB
+rcqDNIcNHQXn+EfEyyVusmscH/BqGhw8uNLBGOZeRO0+zoID2fXi6mFgjhUIExoroH7/DV2mag30
++Z8H1jsIToaoQhPnb3frHPZkFm+kWMfMX8gZwdcazjdRUa1fAzcohFMBqRQuDiKYIDwgiUuzcZ5J
+UQCLpUkmJwFQaE5t/VUEVviQZ/u01i1OAAhlkMFL59mERswkTLQL6zXKC9N4SzPTTQK7zpu8JMEB
+/J8tSBalcXZDOCpiKP42l9dJliFCyAtBuBfSwOomAU5cRuKcWpFcMI1EyNKLW+KWqIGXkOmAJ+V9
+vClSOeXti7J1txihwWQlzFqnzHHQsiLxSqvWTLWX9w6jLy2uIzSrdSkBeD33Nt0qz6diDjKbsCni
+DW+v6i4nzgl69hN1Qp6gltAXvwNFT5SqN9K+RF4ByUIMFazyNM3vgGRHQSDEHjYyStlnTngL7+Bf
+gIv/prJarIPAGckC1qAQ+SFQCARUgsw0V2skPG7TrNwWMknGkiIvl7KkoR5H7ANG/JGNca7Bh7zS
+So2ni6ucb5IKRdJcq8yENV4WViwfX/O8YRqguRXRzDRt6LTB6aXFOp5LY5LM5Qp3gl6k13bZYcyg
+Z0zSxZXYsJaBd0AWmbAG6RcsKHRWlSQjAGDw5ouzpKhTaqSQwUQMA20Kgr+JUaXn2lgC9ma1HKBA
+YvW9AP0DuP0DttHdOgH6LAACSBiUUrB886Qq0UBo5FHgK33Tn8cHTj1bad3EQ67iJNVaPs6CM3p4
+Wpa0fReywF5TTQwFM8wqNO2uM6AjbvPRaBQExhzaKvM1V0FVbo+AFYQZZzab1wkqvtkMVb3+oQIe
+RTgDe91sOwsPJITp9AGo5HRZlfkGX9u5fQJhAmNhj2BPXJCUkWwge5z4GsnnivTCNEXd7bCzQDkU
+XPxw+v7sy+kncSwuG5E2bcuzKxjzNIuBrUkjAFO1hm1kGbREwZeg7BPvQb0TU4A+o960fWVc1cC7
+gPrnsqbXMI2F9zI4/XDy5vx09uOn0x9mn84+nwKCoGdksEdTRvVYg8GoItgcwJVLFWn9GnR60IM3
+J5/sg2CWqNkffw/sBk/G17ICJi7HMOOpCDfxvQIGDafUdII4dhqABg8nE/GNOHz+/NUhQSu2xRaA
+gdp1muLDmdbosyRb5eGEGv/MJv0xCyltv10e/f5KHB+L8Of4Ng4DsKGapswS39N2+rwtJHSt4M84
+V5MgWMoVbL0biRt0/Jzs4gl3gCWBlrnW0z/nSWbeM1e6Q5D8GFMPwGE2W6SxUth4NguBCNSh5wMd
+IjaucdeNoWOxdbtONCr4KSUsbIZdpvhPD4rxnPohGoyi28U0gu26WcRKciuaPvSbzVBmzWZjPSBs
+ZtoxYHCxGAqFaYIyq0zAriXOQxk2V3mKPxE+SgHagOhaoZTERdKuU3Qbp7VUY2dSQMTxuEVGFLSJ
+In4EE2UMmrhZusmkTU3DM9AMyJfmIEXLFuXwswf2Dogr48Sho8e+F9MMMf0zexqEA5icIYp7pVpQ
+WDqKi9ML8erF4T6aM+BzLi11vOaooZOslvbhClbL7AdGmHuZ/eLSZYVyFp8e7Ya5iezKdFlhpZe4
+lJv8Vi4BW2RgZ5XFD/QGPHOYxyKGVQS5TvYAi1BjN8boh/LsYbeg7QDU2xAUs/5m6fc4GCAzBYKI
+HWsitfb6WRUWZX6boLEx3+qXoCtBWKLGNIZN4Cycx2SoEkFCgBWcIaXuZAjisKzZYCW8ESTqi2Uj
+WCMCd46S+oq+3mT5XTZjT/gYhe54YlkXN5ZmXmzQLMGeeA9aCJDMwbFriMZQwOQXuLf2AXmYPkwX
+KEu+BQACRa/IXXNgGVePpsheIw6LMCavBW3eUqK9cGuGIFfLEMOBRG8j+8BICYQEk7MCzooGzWS4
+10wzGNghic915xG7oD6AFhUjUJtjDY0bGfpdHoFwFueuUHL6oUb+8uULs41aU3wFEZvjpNGEWJGy
+jIotKNYEZIKxyDhaQ2xwB8YtgKmVZk2x/0nkBVtjsJ4Xem+DHQDeXVUVRwcHd3d3kY4u5OX1gVod
+/OFPf/zjn16wTFwuiX9gOs5u0aG26IDeoUUbfW000Ddm5Vr8mGQ+NxKssSSrjExRxO/bOlnm4mh/
+YuUncnGjpvFfY8qAAJmZQZnKQNtRg9Eztf8seqVG4hlpZ9t2PGG7RKtUq8V8rQs9qhwsAbBbFnmN
+qrrhBCW+Au0GHvpSzuvr0A7u6UjzA6aK+3RseWD/5RVi4HOG4SujimcoJYgtUOM7pP+B2SYm60hL
+CCQvqqiO97ztl2KGuMvH73drazqbxswwUcgduCP8Jo/egLZxd+fgR5u2qPcc09Z8PEVgNH1gmFcb
+lmPcOIQLrsXU3XUOV6PFC7vpjkUzCBhXNIKABiNxztTW4EhHhggSrRvj7PPC6hZAp1bk0MQHzCpA
+C3ecjrZrs4JjCSEPHIuX9ESCiXzUefeCl7ZOUwrotHjUowoD9hYa9XQOfDk2AKZiVP444pbGTfnY
+WhRegx5gOceAkMFWHWbCN64NONob9bBTR+sP9WYa94HARRpzLOpR0AnlYx6hVLCbirHfc4jFLXG7
+g+3UOMRUZploS6uBzdUWHr2baqdiWiUZyl5nkaJFmoNVbKUiMVLz3jcWyA/Cx33KTO9ATYaGHE6j
+Y7L2vA0Y6nYYPruuMdDgxmEQo02iSLshmdbwD5gVFN+gYBTQkqBZMI/dZf7EfoM9Z+ervwywhyU0
+MoTbdMgM6WgMDce83xNIRh2NgV2QAQm7m5FMRxYHKXCYs0De5obXcnB3E4xIwT5zNAiJGcCdXnoO
+Dj6J8ASEdihCvq+ULMRXYgTL196qj5PdvymXmiDE2GlApoKOXhy7kQ0nqnHcOfsA8wPPkHrY2492
+0MlJkQM/z8EAcsP+LtMbFrYhGDDdfTFuUQT5TFGZ0cRF/MqQyQ0t/+7YadGQzgxi2MsbyJukGWkS
+2MXXoGH5DRiPA9pj6cdu/AL7jsNcHcrNPXiDYZmoRa5CiqC0IxnuR/NIlzYW2/NkPoI/3gKMJlce
+JJnqaAbGXP6JQUIPetgH3ZssBkmWcXmXZCGJM02/Y39pOnhYUnoq7+ATOVcHMFGMfx68L2G70EHo
+AWwulAvgo8tQaSegC3bnFEcWLncfeUb05dGrqy5xp0PxHvvpX6rT+6qMFa5WyovGmwJXq6vOUQTD
+5OJsq48y9VE3Og1lrsCnFB8/fRFICI7y3sXbp029YXjE5sE5eR+DOki5B8nVmh2xCyCCMhIZ5SB8
+Okc+HtmnTm7HxJ4A5EkMs2NRDCTNJ/8MnF0LBWPsL7cZRtV6mZAsUBL55oSkG7AyH2gIPv4xIw6j
+6Y7DbXvir46e+fLlAdxbJO4dB8OPLYuTQM/IsMAsgIdoWco4JbPG6UcBzKxhTNummLC2IFdTc/BV
+j33rfkw7DNBLsDhe6NnPOH7bbt7xV81nj0gE3n0+/xl8ZKXDardxktLJAqC0v48C1bj3HLHolxge
+pJ1CxUG7zwNTly9grUKOJ0y6i6TNsRMTcu7xg82niFUXlT2dRdAcgnmZAe4B6LCQ6TUJfGvg4LcV
+kU8E5M1p1ENGrX/NEC/4qOSwR7A+Yd5Pn/FvOuvHzdz3VP6/Z/niXzPJJ0zFQNMKY9LSvH3EcnWt
+AfYIlTRgau4wBbtD82nlyhh0LJKUeI6y67m4o4QFiq7iWRFAWbKt1wMHd6k+9n5blyUfXpMILGS5
+jweyU4G5Wsba6xX+e+Lgg6wQE9tsQdFqJ7Mn79t8oY4/25mEja/Qz53r3EStZHablNAXBO44/O7j
+96fhoC7DTsPapM0lj7cVEO4TGDfUxAmf0ocp9JQu/7z4aLsrPkFNToCJCWuydQnbCQWbSEL/GjwQ
+E/KObPmgHX30xVoubmaSkgeQTbGrExZ/i68RE5tT4GeAqXhFaWwwk0VaI63YZsD8w1WdLeiEpJJg
++ehkYUweopQADgCu0vhajKnzEoNPmhspPnUbl9riLMoc01NFnSwPrpOlkL/UcYquvFytABc8vtKv
+Ih6ezETxjrMaOG1RyUVdJtUWSBCrXJ/+UQKE03C+5YmOPST5oIcJiCkRR+ITThvfM+GWhlwmIOCf
+eeAk0dfGDk66QkTP4X2Wz3DUGWX5Thmp7sk8PQ7aI+QAYARAYf6jiY7d+W8kvXKPGGnNXaKilPRI
+6UYXcjLGEMp4gtEN/k0/fUZ0eWsAy+thLK93Y3ndxvK6F8trH8vr3Vi6WwIX1oatzE7oC121DzZ6
+M27cOBMPcxqDF0PtMPsTszwBoiiMU232FCdBe9EsPuEjICS2nSNnethk0CScVlrmHATXIJH78RhL
+O/Amfd3pTPk4ujNPxZizQ1lEft+DKKJksTl15/22jKs48vbFdZrPYdtadKcNgKloJxRxtDS7nc05
+vtvSVKOL//r83ccP2BxBjUyCA3XDRUTFglMZP4/La9XdTY1bVgA7Uks/FYe6aYB7j4ym8Sh7/M87
+yvFAxhF3lKOQiwIsAMrrss3c7KcwbD3XaVL6OTM5HzeBm5tVo2ZSA0Q6ubh4d/L5ZERhvtH/jtwN
+Y2jr7w4XH9PCNujab25zS3HsA5tax7Ma5efOyaN1wxEP61gDtmP5th4cPkZh9zrx/iz/pZSCJQFC
+RTrg+xRCPdpz+FX+UIc+hhE76X/u2RobK/ads/ccE8XZ+n0HD+0B/ONO9DFmQABtQo2NZ9D4yi2h
+b9XrDoo6QB9p6/1qX7PterU9GZ+idhI9BqBDWdts2PzzTmpY6SlZvTn99uzD+dmbi5PP3zkmIJpy
+Hz8dHIrT778IyhBBBcY2UYzJERXmIoFicUudxDKH/2qM/CzrigPD0Ovd+bk+ndlgsQtmP6POieA5
+JzJZaBzK4sizfagzkBCjVDtITlURJexQ1RH6SxuuaFG5zpCmYqU5Gqu1dr10tZipKqOT7Qh2HzR2
+ScEgOMkMXlEee2W8wpLPAHWlVQ9SWkfb1JCUQnWdhAHnBMycqHjBUeoMT5rOWtBfhi6u4VWkijQB
+T+51aPeS7oYJMg3j6If2iJvx6pOATncYWTfkWQ9igVrrdchz0/0nDaP9UgOGDYO9g3lnkhJEKAcb
+09tEiI349CaU9/DVLr1eAwULhod7FS6iYboEZh+Dcy3WCTgQwJNr0L7oJwCE1kr4hwBHTnRA5pif
+Eb7dLPf/EmqC+K1/+qmneVWm+38TBXhBgpOJwh5iuo3fgeMTyUicfnw/CRk5Ss4Vf6mxQAAMEgqA
+OrudMpj4DH02VjJd6QwTXx7gC20n0OtW91IWpe7ebxqHuAOeqTFZDc+UoV+ICV8W9hSnMmmBxtoH
+ixnWELonteazJz6tZZrqjPezd+enYDtiOQbuID5rO4XhOF6Ch+g6/Y5rHFug8IgdXpfIxiWasJRm
+sYy8Zr1Ba9xy1NvLzLDrRIHhbq9OFLiME+WiPcZpMyxTUBAhK8NamGVl1m61QQq7bYjiuGeYJWYX
+JaWw+jwBvExPY3aJwFfCYg8TgeeT4ySrTM5imixAjoLIBYE6hU2CxMWKRuK8POMYeF4qUwgFD4tt
+mVyvKzxzgM4RFWFg8+9PvpyffaDChMNXjdXdw5xT8gSmnEZyjEmCGO2AL27iH3LVbNbHs/oVwkDp
+A3/arzg/5ZgH6PTjwCL+ab/iSrRjxxPkGYCAqov29kAHwOnWt2+avcC4Wj8YP24SYIOZD4ZikVj4
+olM93Pl1OdG2bKkSivuYl91Q3uABzqqwSWm6s5uU1v7oOa4KPH1ajvsbwdu+vWU+c+h603kzlP7m
+fjq7EItiAaNua38Mkx/Waaqn4zDbELeQW6t17E+ZEyt12i0y3MpAxLHbeeIyWb8Q1s2ZA71E6g4w
+8bVG1+zEXlE++ikbaQvDw8QSu+OnmI5UyEJKACMZUlf/1GBDoUYAAUL5v2Nn504nzw+9OTra4OE5
+atkFuvE7EIQ6G5eqPPISOBG+/MKGI78itFCOHonQsVQymeU2Uww/d2u0Kl/6c+zdAxTExG1Xxtm1
+HDOsqYH5lU/sgRAsSVuP1JfJVZ9iEWdgnN4PcHh3X/QfnBjUWozQaXcjt21x5JMHG/QWg+wkmA++
+jO9A9hd1NeaV7N/y/dV0w1Afhoj5h9BUn4mPQwzH/BLuOPTeQQ0NCy28XwbOLnltjCFr9WOrrim0
+L7QFuyjBNasUHcs45YnGFrVWQKNwjxuVP7JPdXKQ/d1TKebEhCxQHtwF6c1tpBu0wgkjLlji2tGE
+EuKbehr9bilvZQpKA5TsGOsdfrb1DpPIhlN6c79+NXYX24ttP270psHsyBRkIAJUitEb6NmFUIMD
+rvBP2hOJsxsyjt/+9Wwq3n74Af59Iz+CBsWqx6n4G4wu3uYluJVctkv3KWAJR8X+Yl4rLI0kaHRC
+wVdPoLV24ZEXT0N0bYlfVGIFpMB02nLD950AijxBKmVvzANTMQG/TUlXywg1BmLfWoz0S6TBcJUL
+VoYc6JbRutqkqCac4EiziJej87O3px8+nUbVPTK2+Tlygid+7hVORx8Nl3gMNhX2yaLGJ1eOvfyd
+TIsec1n7mqZiBn1NEYI7Ulj/ku/SiK1PEZcYMBDFdpkvImwJnM5FetUd2M8Tx618UL97yhVhjSf6
+8Kwx4vExUEP81JY/I2hIffScqCchFM+xWowfR6N+DTwVFNGGP89v7pZuQFyX/dAE25g2sx773a0I
+XDOdNTzLSYTXsV0GUwmaJrHazBduheDHTOirUEC40fGGXMV1WgmZgStFvj3dSQEC3i3q4x3CrMJa
+jCrdKDqT3sVb5eQexUqMcNQRldXjOQwFCsH1/j6+YTWA1Yai5iJogE6IktuUO11VvVjzDmZPiKjX
+k29wl2Sv3OQXTWEelB3jRWO/wjzRWmSMrmWl588PxpPLl02CAwWjF15J76IAZeeyyR5IzOL58+cj
+8R8PGz2MSpTm+Q1YYwC711g5p9cDCltPzq5W16A3byLgx8VaXsKDKwqa2+d1RhHJHV1pQaT9a2CE
+uDahZUbTvqWOOVZX8vkyt+BzKq0wfswSuvAII0oSha2+NwqjTWY3EUuCYAhjtUiSkKMTsB7bvMZq
+PIwuan6R98DxCYKZ4ls8GGMPe42GJeXKWu6x6ByLEQEeUUoZj0blzFSPBnjOLrYazdlZllRNIckL
+98xUXwJQ2XuMNF+J+A53hplHixhOYafHqo1hne9kUc9RyReXbpyxNUt+/RDuwNqw0/LVymAKD80i
+LXJZLow6xRVLFknlgDHtEA53puubSPtEQQ9KIxDvpBWWdkfbt7+z6+Ji+pGOj/fNSDprqLJXYnFM
+KM5aeYVR1IxP0SdLSMu35ssERvlA0WxtCXhjid/pWCrWDXg3d7gFjXWmb+TgtI3mmg6AQ7dAWQFp
+2dGTEc7VYxY+M+3APRr4Ic+ccLtNyqqO05m++GGGdtrMnqf3VHLYorid5Z7WcgE7PwcjeF9n7IMR
+YRJtkLaYE2sqMo7FSkcpIrfOzC/JKnK0+A7ZbgL7Aqm0nJnqaBNHurSsa8tOdbKjI+4R1FemlGnA
+ODc1NJ2CExfzKaU6mXKHAUPaz72kiyzEN2L8aioOW17QotjivU6A7LNl6Jtl1A2m4gQGzBzbt2SI
+b47F+OVU/GEH9GhggKNDd4S2T9uCMAjk1dWTyQjsRmQL+1LYH+6r8xlB6jOOk6s2+btk+pqo9O8t
+KnG9oE5aftlOWm6NPejDdj4+kuEGhMgqkcv9ZwpJqJFu5PQwgxN+WE6/Z/O1dCV5U1FDZXRzcEzu
+GpnoSEdjQttBTIm6FmVczYtyh5WovYHApMy00hbtnXOY0qjRaxEVAMz6jtXwG970Au81KVxbbfC4
+VafqW7A90QRd98mHZ03DZqM+aBQ+SQI8wCgixIPVRlC4O+sJWySkW3GIib5qHWg7HP+bMY9nNjxU
+5mHKOwjPgfIOLlwYOl/1pqsrPAan+wBrNCMN8ka7nkKfgf4m+8SB0uwYsFfNfZVkaR5hAjNfRJPb
+ROYN3ghJlEZNmErXcmJvmq/+QlOGwgeUTwaUA2OqXuE63dIFlyeK8t7wnprfH76cmvJgBqQn8Cp6
+9ZW+B5K6mRsQfDN7qt03eKn7HUb/5gBLKr+3fdVxaGhax60LofzBQgqgTaKZpUOjjx4uBWnWLBZ4
+cWJDTDav7S0g78HgmYOpY25AzcFmA5806kPXFRTNph2SaAP79mFNMcTpj+rayE9E2rP3Hykzd8nL
+J28F3atfcWAUATl/HfMbtADr4shG2YwqwcPPsZvQiZ/qZtZXFsZqBHVsdRPumj733zV33SKwMzf5
+DJ25+2WlLg1032Hl2UcDjnBoQjyqSqIR9P06xBX/U51G0x+k1x8kv9sJZzqgTR4CY5J2MORP7Kmx
+N9p+Ey/c75gTts+3MrtVxL02RmvanbLqNsc/xkBoZL+9ZoCSmpaaA9llomv2ZpwmO5PX12oW4xWP
+M/KzKaWrcaAaR4/+vqcb+mSstsbhwpuLAIThJp186+bXA2OArOSrpjkjyrmiRtDQlDfsJCKrZMkq
+QXt3AC7ioCn1N7F4ziQepRJj3aouixIc4pG+kJhTdfqymxugJoa3idWNQd30mOr7aUmwUn6YqTzm
+UG0rzweIwKq4oxpmM/sOeOVFc9dCMrXMILN6I8u4au4Z8pMCEvC1mhGo1hwX14nQNbuyxSUuYonl
+DQcpjJHZ71+BP+n51TsuV5hYafd4dqIeOur7lHsbHGVkuDi5t3cMundbLel+a9cotM0arrP3KsEy
+mAvzSEbqcBm/1Zd48UWzHMxHs9LhH9jvbvGln4huxRkbtRYN55krELq3NuFFAaSc+y5j7HBA99rF
+lt9rx/flhWWUjqc80NhSUZvivQKnGW3SBJEwZ/SBIJJfF/DEIJIH/5FBJH11JigajY+WA51KAXpp
+HAjnaBd/U7TooSvE3JiShsPxJKMrWyLfAnZTm+mZzaFpmgzbqw3KunNflIqYsX2bkDOgDWK5EnR3
+0E239a7lbPYF9J0Bz+CRfutSR0ONsVuGUOQquR/ZS7ZZdTi1jYZ0uEG797URCL5+U7k52971eA4d
+XMlCj789//jm5Jz4YHZx8vY/T76lnDT0IVuL9mgOyPJ95rR9L/vdjTDqPKK+wZs59FyRyyVcGkLn
+fScFowdCf7le3+q1hbj7urlJx7JEP4ROHZTbxNJiNx1aUIf0Vy/kjpGqa27cdKJW3nqgn3KSsfnl
+ZGqYR+bkkjdDczJp3jeHSVpgdWLtQyvppPt2Zas23vW9qAPnABObdE4rgGdIyHD2CMlUENmDCrbW
+2v/jE8qUx+pLc4sQ7MGFdO62pGstGVTl/x9WSpD8MTq6bDVP7W3l1I6Py5S9hh/PwhcyMgTxyh9H
+3fm5W30p0wEqBAFLf31zIyNilIE+YLbpGM+UuNynQut9FDVX9heumbb0/5pg0kVlb0BTnLDFx87Q
+eFWnbiKF7dPpQBYwnc7lK6eyB+TeAdC52a8K2BuNRxaH860IwYvW9ikmCxMd9fWFDvJoRDjYG1q9
+EPtDZbhuGaoQL4cbLluVrrrHIfdQD/RQtSl2dFQRZq0O1deKbwgyH+8KuvLMs8Qwp0DHQODr7eXL
+I3vAgvyOrx1BQtl1I8fKuXSyU3des+l0J2Ypp5S+iI6rExbXLa4cqGwgDTl6nRKdAWfQ5H0wpJH3
+vj+3z/Tw/mcEozamlvWOYEpi/ExNaFpOUZPG3T6ZdKfbiK0uEC7QegSQjggEWAimIxudhNktZ72P
+X2iDZF7TBcXuKVvo7ApKnvM5gnsYQ7jBr92dCqsf1Z1RNP25QZsD9ZLD5mZjgls5NNmpEtpTb/hg
+wCbgGvX+/i8f0b8bS7fdD3c5GbbVq966SDbsMRMYM6VaJDKPI1AyIDfHJK2xfMRsdLyWp6Gjy1DN
+3JAv8MiTsovx+nHytsiknWkLwCqF4P8ADjw+/w==
 """)
 
 ##file activate.sh
Only in python/virtualenv: virtualenv.py.orig
Only in python/virtualenv: virtualenv.py.rej
diff -urp python/virtualenv.orig/virtualenv_embedded/site.py python/virtualenv/virtualenv_embedded/site.py
--- a/python/virtualenv.orig/virtualenv_embedded/site.py	2018-05-01 17:32:08.369518429 -0700
+++ b/python/virtualenv/virtualenv_embedded/site.py	2018-05-01 17:38:35.163522453 -0700
@@ -206,7 +206,7 @@ def addsitedir(sitedir, known_paths=None
         known_paths = None
     return known_paths
 
-def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix):
+def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix, libarch=None):
     """Add site-packages (and possibly site-python) to sys.path"""
     prefixes = [os.path.join(sys_prefix, "local"), sys_prefix]
     if exec_prefix != sys_prefix:
@@ -236,13 +236,14 @@ def addsitepackages(known_paths, sys_pre
                                          "site-packages"),
                             os.path.join(prefix, "lib", "site-python"),
                             os.path.join(prefix, "python" + sys.version[:3], "lib-dynload")]
-                lib64_dir = os.path.join(prefix, "lib64", "python" + sys.version[:3], "site-packages")
-                if (os.path.exists(lib64_dir) and
-                    os.path.realpath(lib64_dir) not in [os.path.realpath(p) for p in sitedirs]):
-                    if _is_64bit:
-                        sitedirs.insert(0, lib64_dir)
-                    else:
-                        sitedirs.append(lib64_dir)
+
+                if libarch is not None:
+                    libXX = "lib" + libarch
+                    libXXdir = os.path.join(prefix, libXX, "python" + sys.version[:3], "site-packages")
+                    if (os.path.exists(libXX_dir) and
+                        os.path.realpath(libXX_dir) not in [os.path.realpath(p) for p in sitedirs]):
+                            sitedirs.insert(0, libXX_dir)
+
                 try:
                     # sys.getobjects only available in --with-pydebug build
                     sys.getobjects
@@ -549,7 +550,7 @@ def execsitecustomize():
     except ImportError:
         pass
 
-def virtual_install_main_packages():
+def virtual_install_main_packages(libarch=None):
     f = open(os.path.join(os.path.dirname(__file__), 'orig-prefix.txt'))
     sys.real_prefix = f.read().strip()
     f.close()
@@ -583,12 +584,13 @@ def virtual_install_main_packages():
     else:
         paths = [os.path.join(sys.real_prefix, 'lib', 'python'+sys.version[:3])]
         hardcoded_relative_dirs = paths[:] # for the special 'darwin' case below
-        lib64_path = os.path.join(sys.real_prefix, 'lib64', 'python'+sys.version[:3])
-        if os.path.exists(lib64_path):
-            if _is_64bit:
-                paths.insert(0, lib64_path)
-            else:
-                paths.append(lib64_path)
+
+        if libarch is not None:
+            libXX = 'lib' + libarch
+            libXX_path = os.path.join(sys.real_prefix, libXX, 'python'+sys.version[:3])
+            if os.path.exists(libXX_path):
+                paths.insert(0, libXX_path)
+
         # This is hardcoded in the Python executable, but relative to
         # sys.prefix.  Debian change: we need to add the multiarch triplet
         # here, which is where the real stuff lives.  As per PEP 421, in
@@ -667,20 +669,30 @@ def execusercustomize():
 
 def main():
     global ENABLE_USER_SITE
-    virtual_install_main_packages()
+
+    libarch = None
+    arch_file = os.path.join(os.path.dirname(__file__), 'libarch.txt')
+    if os.path.exists(arch_file):
+        arch_fp = open(arch_file)
+        try:
+            libarch = arch_fp.read().strip()
+        finally:
+            arch_fp.close()
+
+    virtual_install_main_packages(libarch)
+
     abs__file__()
     paths_in_sys = removeduppaths()
     if (os.name == "posix" and sys.path and
         os.path.basename(sys.path[-1]) == "Modules"):
         addbuilddir()
-    if _is_jython:
         fixclasspath()
     GLOBAL_SITE_PACKAGES = not os.path.exists(os.path.join(os.path.dirname(__file__), 'no-global-site-packages.txt'))
     if not GLOBAL_SITE_PACKAGES:
         ENABLE_USER_SITE = False
     if ENABLE_USER_SITE is None:
         ENABLE_USER_SITE = check_enableusersite()
-    paths_in_sys = addsitepackages(paths_in_sys)
+    paths_in_sys = addsitepackages(paths_in_sys, libarch=libarch)
     paths_in_sys = addusersitepackages(paths_in_sys)
     if GLOBAL_SITE_PACKAGES:
         paths_in_sys = virtual_addsitepackages(paths_in_sys)
