# HG changeset patch
# User Jan de Mooij <jdemooij@mozilla.com>
# Parent  f6b61c4c6a576732d90ba9a18568787a3e4bd17c

diff --git a/js/src/jit/IonCaches.cpp b/js/src/jit/IonCaches.cpp
--- a/js/src/jit/IonCaches.cpp
+++ b/js/src/jit/IonCaches.cpp
@@ -2604,21 +2604,23 @@ GenerateCallSetter(JSContext* cx, IonScr
 
     // Good to go for invoking setter.
 
     MacroAssembler::AfterICSaveLive aic = masm.icSaveLive(liveRegs);
 
     // Remaining registers should basically be free, but we need to use |object| still
     // so leave it alone.  And of course we need our value, if it's not a constant.
     AllocatableRegisterSet regSet(RegisterSet::All());
-    regSet.take(AnyRegister(object));
     if (!value.constant())
-        regSet.takeUnchecked(value.reg());
-
-    regSet.takeUnchecked(tempReg);
+        regSet.take(value.reg());
+    bool valueAliasesObject = !regSet.has(object);
+    if (!valueAliasesObject)
+        regSet.take(object);
+
+    regSet.take(tempReg);
 
     // This is a slower stub path, and we're going to be doing a call anyway.  Don't need
     // to try so hard to not use the stack.  Scratch regs are just taken from the register
     // set not including the input, current value saved on the stack, and restored when
     // we're done with it.
     //
     // Be very careful not to use any of these before value is pushed, since they
     // might shadow.
@@ -2692,17 +2694,18 @@ GenerateCallSetter(JSContext* cx, IonScr
 
         attacher.pushStubCodePointer(masm);
 
         // Push args on stack so we can take pointers to make handles.
         if (value.constant()) {
             masm.Push(value.value());
         } else {
             masm.Push(value.reg());
-            regSet.add(value.reg());
+            if (!valueAliasesObject)
+                regSet.add(value.reg());
         }
 
         // OK, now we can grab our remaining registers and grab the pointer to
         // what we just pushed into one of them.
         Register argJSContextReg = regSet.takeAnyGeneral();
         Register argValueReg     = regSet.takeAnyGeneral();
         // We can just reuse the "object" register for argObjReg
         Register argObjReg       = object;
