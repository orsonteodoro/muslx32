--- musl-1.2.1-r1.ebuild.orig	2020-11-24 07:09:16.000000000 -0800
+++ musl-1.2.1-r1.ebuild	2020-11-25 01:28:17.142473281 -0800
@@ -3,7 +3,7 @@
 
 EAPI=7
 
-inherit eutils flag-o-matic multilib toolchain-funcs
+inherit eutils flag-o-matic multilib-minimal toolchain-funcs
 if [[ ${PV} == "9999" ]] ; then
 	EGIT_REPO_URI="git://git.musl-libc.org/musl"
 	inherit git-r3
@@ -28,14 +28,104 @@ if [[ ${CTARGET} == ${CHOST} ]] ; then
 	fi
 fi
 
+# current sub
+abi_to_host() {
+	local abi="$1"
+	if [[ "${abi}" == "amd64" ]] ; then
+		echo "x86_64-pc-linux-musl"
+	elif [[ "${abi}" == "x86" ]] ; then
+		echo "i686-pc-linux-musl"
+	elif [[ "${abi}" == "x32" ]] ; then
+		echo "x86_64-pc-linux-muslx32"
+	else
+		die "Unsupported ${abi}.  Please expand list."
+	fi
+}
+
+multilib_cflags() {
+	if [[ "${ABI}" == "amd64" ]] ; then
+		echo "${CFLAGS_amd64} --sysroot=/usr/x86_64-pc-linux-musl/usr/lib"
+	elif [[ "${ABI}" == "x86" ]] ; then
+		echo "${CFLAGS_x86} --sysroot=/usr/i686-pc-linux-musl/usr/lib"
+	elif [[ "${ABI}" == "x32" ]] ; then
+		echo "${CFLAGS_x32} --sysroot=/usr/x86_64-pc-linux-muslx32/usr/lib"
+	else
+		die "Unsupported ${ABI}.  Please expand list."
+	fi
+}
+
+multilib_ldflags() {
+	if [[ "${ABI}" == "amd64" ]] ; then
+		echo "${LDFLAGS_amd64}"
+	elif [[ "${ABI}" == "x86" ]] ; then
+		echo "${LDFLAGS_x86}"
+	elif [[ "${ABI}" == "x32" ]] ; then
+		echo "${LDFLAGS_x32}"
+	else
+		die "Unsupported ${ABI}.  Please expand list."
+	fi
+}
+
+ctarget_libdir() {
+        if [[ "${CTARGET}" == "x86_64-pc-linux-musl" ]] ; then
+                echo "lib64"
+        elif [[ "${CTARGET}" == "i686-pc-linux-musl" ]] ; then
+                echo "lib32"
+        elif [[ "${CTARGET}" == "x86_64-pc-linux-muslx32" ]] ; then
+                echo "libx32"
+        else
+                die "Unsupported ${CTARGET}.  Please expand list."
+        fi
+}
+
+host_libdir() {
+	local host="$1"
+        if [[ "${host}" == "x86_64-pc-linux-musl" ]] ; then
+                echo "lib64"
+        elif [[ "${host}" == "i686-pc-linux-musl" ]] ; then
+                echo "lib32"
+        elif [[ "${host}" == "x86_64-pc-linux-muslx32" ]] ; then
+                echo "libx32"
+        else
+                die "Unsupported ${host}.  Please expand list."
+        fi
+}
+
+abi_libdir() {
+	local host="$1"
+        if [[ "${host}" == "amd64" ]] ; then
+                echo "lib64"
+        elif [[ "${host}" == "x86" ]] ; then
+                echo "lib32"
+        elif [[ "${host}" == "x32" ]] ; then
+                echo "libx32"
+        else
+                die "Unsupported ${host}.  Please expand list."
+        fi
+}
+
+abi_native() {
+	local abi="$1"
+        if [[ "${abi}" == "amd64" ]] ; then
+                echo "x86_64"
+        elif [[ "${abi}" == "x86" ]] ; then
+                echo "i386"
+        elif [[ "${abi}" == "x32" ]] ; then
+                echo "x32"
+        else
+                die "Unsupported ${host}.  Please expand list."
+        fi
+}
+
 DESCRIPTION="Light, fast and simple C library focused on standards-conformance and safety"
 HOMEPAGE="http://www.musl-libc.org/"
 LICENSE="MIT LGPL-2 GPL-2"
 SLOT="0"
 IUSE="headers-only"
 
-QA_SONAME="/usr/lib/libc.so"
-QA_DT_NEEDED="/usr/lib/libc.so"
+#QA_SONAME="/usr/lib/libc.so"
+#QA_DT_NEEDED="/usr/lib/libc.so"
+ARCHES=
 
 PATCHES=(
 	"${FILESDIR}/${P}-CVE-2020-28928.patch"
@@ -64,20 +154,43 @@ pkg_setup() {
 	fi
 }
 
-src_configure() {
+src_prepare() {
+	default
+	if [[ "${CHOST}" =~ "muslx32" ]] ; then
+		eapply "${FILESDIR}"/musl-1.1.15-gdb-ptrace.patch # for gdb on x32
+		eapply "${FILESDIR}"/musl-9999-timex-x32.patch # for chrony
+		eapply "${FILESDIR}"/musl-1.2.1-add_libssp_nonshared.patch # for multilib gcc on i686
+	fi
+	eapply_user
+	multilib_copy_sources
+}
+
+multilib_src_configure() {
+	export CTARGET2=$(abi_to_host ${ABI})
+	einfo "Multilib sub ABI: CTARGET2=${CTARGET2}"
+	einfo "Default ABI: CTARGET=${CTARGET}"
 	tc-getCC ${CTARGET}
 	just_headers && export CC=true
 
+	libdir="lib"
+	if ! is_crosscompile ; then
+		libdir=$(abi_libdir ${ABI})
+	fi
+
+	export CROSS_COMPILE="${CTARGET}-"
 	local sysroot
-	is_crosscompile && sysroot=/usr/${CTARGET}
+	is_crosscompile && sysroot=/usr/${CTARGET2}
 	./configure \
-		--target=${CTARGET} \
+		--target=${CTARGET2} \
 		--prefix=${sysroot}/usr \
-		--syslibdir=${sysroot}/lib \
+		--syslibdir=${sysroot}/${libdir} \
 		--disable-gcc-wrapper || die
+
+	export ARCHES="${ARCHES} $(abi_native ${ABI})"
+	einfo "ARCHES=${ARCHES}"
 }
 
-src_compile() {
+multilib_src_compile() {
 	emake obj/include/bits/alltypes.h
 	just_headers && return 0
 
@@ -85,34 +198,90 @@ src_compile() {
 	if [[ ${CATEGORY} != cross-* ]] ; then
 		emake -C "${T}" getconf getent iconv \
 			CC="$(tc-getCC)" \
-			CFLAGS="${CFLAGS}" \
+			CFLAGS="${CFLAGS} $(multilib_cflags)" \
 			CPPFLAGS="${CPPFLAGS}" \
-			LDFLAGS="${LDFLAGS}" \
+			LDFLAGS="${LDFLAGS} $(multilib_ldflags)" \
 			VPATH="${DISTDIR}"
 	fi
 }
 
-src_install() {
+multilib_src_install() {
+	export CTARGET2=$(abi_to_host ${ABI})
+	einfo "CTARGET2=${CTARGET2}"
+	einfo "CTARGET=${CTARGET}"
 	local target="install"
 	just_headers && target="install-headers"
 	emake DESTDIR="${D}" ${target}
 	just_headers && return 0
 
+	libdir="lib"
+	if ! is_crosscompile ; then
+		libdir=$(abi_libdir ${ABI})
+	fi
+	einfo "libdir=${libdir}"
+
 	# musl provides ldd via a sym link to its ld.so
 	local sysroot
-	is_crosscompile && sysroot=/usr/${CTARGET}
-	local ldso=$(basename "${D}"${sysroot}/lib/ld-musl-*)
-	dosym ${sysroot}/lib/${ldso} ${sysroot}/usr/bin/ldd
+	is_crosscompile && sysroot=/usr/${CTARGET2}
+	local default_libdir=${libdir}
+	local ldso=$(basename "${D}"${sysroot}/${libdir}/ld-musl-*)
+	dosym ../${libdir}/${ldso} ${sysroot}/usr/bin/ldd
+
+	# force relative
+	rm "${D}"/usr/${CTARGET2}/usr/lib/${ldso} || die
+	dosym libc.so /usr/${CTARGET2}/usr/lib/${ldso}
+
+	if [[ "${ABI}" == "${DEFAULT_ABI}" ]] ; then
+		# force relative
+		rm "${D}"/usr/${CTARGET}/lib/${ldso} || die
+		dosym ../usr/lib/libc.so /usr/${CTARGET}/${default_libdir}/${ldso}
+	fi
 
-	if [[ ${CATEGORY} != cross-* ]] ; then
+	if is_crosscompile ; then
+		einfo "default abi"
+
+		_libdir=$(abi_libdir ${ABI})
+		into /
+		dodir /usr/${CTARGET}/usr
+
+		if [[ "${ABI}" == "${DEFAULT_ABI}" ]] ; then
+			einfo "is default_abi"
+			into /
+
+			mv "${D}"/usr/${CTARGET}/usr/lib "${D}"/usr/${CTARGET}/usr/${_libdir} || die
+			[[ -d "${D}"/usr/${CTARGET}/usr/${_libdir} ]] || die
+
+			mv "${D}"/usr/${CTARGET}/lib "${D}"/usr/${CTARGET}/${_libdir} || die
+			[[ -d "${D}"/usr/${CTARGET}/${_libdir} ]] || die
+
+			dosym ${_libdir} /usr/${CTARGET}/lib
+			dosym ${_libdir} /usr/${CTARGET}/usr/lib
+		else
+			einfo "not default_abi"
+
+			cp -a "${D}"/usr/${CTARGET2} "${D}"/usr/${CTARGET}/usr/ || die
+			[[ -d "${D}"/usr/${CTARGET}/usr/${CTARGET2} ]] || die
+
+			dosym ../usr/${CTARGET2}/usr/lib/libc.so /usr/${CTARGET}/${_libdir}/${ldso}
+			rm ${D}/usr/${CTARGET}/usr/${CTARGET2}/lib/${ldso} || die
+			dosym ../usr/lib/libc.so /usr/${CTARGET}/usr/${CTARGET2}/lib/${ldso}
+		fi
+	fi
+
+	# force creation
+	dodir /usr/$(abi_libdir ${ABI})
+	dodir /usr/local/$(abi_libdir ${ABI})
+
+	if [[ ${CATEGORY} != cross-* && "${ABI}" == "${DEFAULT_ABI}" ]] ; then
 		# Fish out of config:
 		#   ARCH = ...
 		#   SUBARCH = ...
 		# and print $(ARCH)$(SUBARCH).
 		local arch=$(awk '{ k[$1] = $3 } END { printf("%s%s", k["ARCH"], k["SUBARCH"]); }' config.mak)
-		[[ -e "${D}"/lib/ld-musl-${arch}.so.1 ]] || die
-		cp "${FILESDIR}"/ldconfig.in "${T}" || die
-		sed -e "s|@@ARCH@@|${arch}|" "${T}"/ldconfig.in > "${T}"/ldconfig || die
+		[[ -e "${D}"/$(abi_libdir ${ABI})/ld-musl-${arch}.so.1 ]] || die
+		cp "${FILESDIR}"/ldconfig.in.multilib "${T}" || die
+		local native=$(abi_native ${ABI})
+		sed -e "s|@@ARCH@@|${arch}|" -e "s|@@ARCHES@@|${ARCHES}|" "${T}"/ldconfig.in.multilib > "${T}"/ldconfig || die
 		into /
 		dosbin "${T}"/ldconfig
 		into /usr
